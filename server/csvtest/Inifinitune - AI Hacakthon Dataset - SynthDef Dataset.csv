prompt,completion
"drum, standard, kick, electronic, punchy, dubstep, house","SynthDef(\kick, {
        var snd;
        snd = SinOsc.ar(45 * (1 + (5 * Env.perc(0, 0.1, curve: -8).ar)) * (1 + (0.4 * Env.perc(0, 0.5, curve: -2).ar)));
        snd = snd + (BPF.ar(Hasher.ar(Sweep.ar), 6130, 0.3) * Env.perc(0.001, 0.02).ar * -12.dbamp);
        snd = snd * (1 + Env.perc(0.0, 0.5).ar);
        snd = snd.tanh;
        snd = snd * Env.adsr(0.001, 0.5, 0, 0.01, curve: -7).ar(Done.freeSelf, \gate.kr(1));
        snd = snd * -4.dbamp;
        snd = snd ! 2;
        Out.ar(\out.kr(0), snd);
}).add;"
"synth, pluck, flange, electronic","SynthDef(\pluck, {
        var snd, shift;
        shift = 2;
        snd = Pulse.ar((\freq.kr(90) * XLine.ar(1.3, 1, 0.01)) + shift);
        snd = FreqShift.ar(snd, shift * -2);
        snd = (RLPF.ar(snd, XLine.kr([1000, 1200], [50, 8310], \duration.kr * 1.3) * \cutoff.kr.linexp(-1, 1, 0.5, 2), 0.1) * [0, -16].dbamp).sum;
        snd = snd + (Latch.ar(snd, Impulse.ar(\sampleRate.kr.linexp(-1, 1, 1000, 16e3))) * -5.dbamp);
        snd = snd * Env.adsr(0.001, 0.4, 0, 0.03, curve: -7).ar(Done.freeSelf, \gate.kr(1));
        snd = snd * -8.dbamp;
        snd = snd * \amp.kr(1);
        snd = snd ! 2;
        Out.ar(\out.kr(0), snd);
}).add;"
"drum, clap, standard, house, regular","SynthDef(\clap, {
	var snd, env;
	env = Env([0, 1, 0.3, 1, 0.3, 1, 0], [0.001, 0.01, 0.001, 0.015, 0.001, 0.1], -4).ar(Done.freeSelf);
	snd = Hasher.ar(Sweep.ar);
	snd = BPF.ar(snd, 1240, 0.3) * 12.dbamp;
	snd = snd * env;
	snd = snd * -5.dbamp;
	snd = Pan2.ar(snd, \pan.kr(0));
	Out.ar(\out.kr(0), snd);
}).add;"
"drum, kick, distorted, chiptune, bitcrushed, distorted, hard","SynthDef(\kick, {
        var snd;
        snd = (LFPulse.ar(30 * (1 + (8 * Env.perc(0.0, 0.1, curve: -3).ar))) - (1 / 2)).sign;
        snd = snd * Env.linen(0.0, \duration.kr(0.08), 0.0).ar(Done.freeSelf);
        snd = snd * \amp.kr(-10.dbamp);
        snd = Pan2.ar(snd, \pan.kr(0));
        OffsetOut.ar(\out.kr(0), snd);
}).add;"
"drum, snare, loud, chiptune, tonal, laser, space, fast ","SynthDef(\snare, {
	var snd;
	snd = LFPulse.ar(210 * (1 + (3 * Env.perc(0.0, 0.08, curve: -2).ar))) - (1 / 2);
	snd = snd + (BPF.ar(Hasher.ar(Sweep.ar), 2210, 0.3) * Env.perc(0.001, 0.05).ar * 30.dbamp);
	snd = snd.sign;
	snd = snd * Env.linen(0.0, \duration.kr(0.07), 0.0).ar(Done.freeSelf);
	snd = snd * \amp.kr(-10.dbamp);
	snd = Pan2.ar(snd, \pan.kr(0));
	OffsetOut.ar(\out.kr(0), snd);
}).add;"
"drum, hat, closed, chiptune, white noise, noisy, noise, fuzzy, fuzz, short","SynthDef(\hat, {
	var snd;
	snd = BPF.ar(Hasher.ar(Sweep.ar), 8210, 0.3);
	snd = snd.sign;
	snd = snd * Env.linen(0.0, 0.02, 0.0).ar(Done.freeSelf);
	snd = snd * \amp.kr(-10.dbamp);
	snd = Pan2.ar(snd, \pan.kr(0));
	OffsetOut.ar(\out.kr(0), snd);
}).add;"
"synth, chiptune, alert, alternating, sin, sinwave, sine, sinewav, saw, sawwave, 2-note, 2-notes, alarm","SynthDef(\chip, {
	var snd;
	snd = (LFPulse.ar(\freq.kr(440) * (2 ** LFPulse.ar(\octaveFreq.kr(3), 0.5))) - (1 / 2)).sign;
	snd = snd * Env.asr(0.0, 1, 0.0).ar(Done.freeSelf, \gate.kr(1));
	snd = snd * \amp.kr(-10.dbamp);
	snd = Pan2.ar(snd, \pan.kr(0));
	OffsetOut.ar(\out.kr(0), snd);
}).add;"
"vocal, bright, vibrant, synth, vox","SynthDef(\vocal, {
	var snd, formantFreq, freq;
	formantFreq = \formantFreq.kr(200) * XLine.kr(3, 1, 0.5);
	freq = \freq.kr(440);
	snd = (LFSaw.ar(freq).linlin(-1, 1, 0, 1) * (formantFreq / freq)) % 1;
	snd = ((snd > 0.5) * 2) - 1;
	snd = snd.sign;
	snd = snd * Env.asr(0.0, 1, 0.0).ar(Done.freeSelf, \gate.kr(1));
	snd = snd * \amp.kr(-10.dbamp);
	snd = Pan2.ar(snd, \pan.kr(0));
	OffsetOut.ar(\out.kr(0), snd);
}).add;"
"synth, fx, effect, effects","SynthDef(\fx, {
	var snd;
	snd = In.ar(\out.kr(0), 2);
	snd = snd.sign * -5.dbamp;
	ReplaceOut.ar(\out.kr(0), snd);
}).add;"
"drum, kick, hard, house, punchy, boxy, box, bright","SynthDef(\kick, {
	var snd, velocity;
	velocity = \velocity.kr(1).clip(0, 1);
	snd = SinOsc.ar(
		69
		* (1 + (3 * Env.perc(0.0, 0.3, curve: -9).ar * velocity))
		* (1 + (8 * Env.perc(0.0, 0.01, curve: -4).ar * velocity))
		* [1, 2.3, 1.4]
	);
	snd = snd * (Env.perc(0, [3.0, 0.5, 0.1]).ar);
	snd = (snd * [0, -10, -15].dbamp).sum;
	snd = snd + (BPF.ar(Hasher.ar(Sweep.ar), 12420, 0.3) * Env.perc(0.001, 0.015).ar * 5.dbamp);
	snd = (snd * 6.dbamp).tanh;
	snd = snd * Env.perc(0.0005, 0.8 * velocity.sqrt).ar(Done.freeSelf);
	snd = (snd * 5.dbamp * velocity).clip2;
	snd = snd * -6.dbamp;
	snd = Pan2.ar(snd, \pan.kr(0));
	Out.ar(\out.kr(0), snd);
}).add;"
"drum, snare, dubstep, loud, hard, tonal","SynthDef(\snare, {
	var snd;
	snd = SinOsc.ar(
		319
		* (1 + (0.5 * Env.perc(0.0, 0.1, curve: -9).ar))
		* (1 + (0.3 * Env.perc(0.0, 0.03, curve: -4).ar))
		* [0.56, 1, 2.3, 3.4]
	);
	snd = snd * (Env.perc(0, [0.3, 3.0, 0.2, 0.1]).ar);
	snd = (snd * [-5, 0, -5, -3].dbamp).sum;
	snd = snd + (BPF.ar(Hasher.ar(Sweep.ar), [2420, 5420, 8329], 0.5) * Env.perc(0.05, 0.2).ar * [5, 0, -8].dbamp).sum;
	snd = (snd * 8.dbamp).tanh;
	snd = snd * Env.perc(0.0005, 0.12, curve: -1).ar(Done.freeSelf);
	snd = snd * -3.dbamp;
	snd = Pan2.ar(snd, \pan.kr(0));
	Out.ar(\out.kr(0), snd);
}).add;"
"synth, resonant, sustain, sustained, tonal, high bass, low synth, melodic","SynthDef(\bass, {
	var snd, freq, duration;
	duration = \duration.kr;
	freq = \freq.kr(440) * XLine.kr(1, \bend.kr.midiratio, duration) * [-0.1, 0.1].midiratio;
	snd = Pulse.ar(freq);
	snd = MoogFF.ar(snd, XLine.kr(ExpRand(500, 3000), ExpRand(500, 3000), duration), 3) * 20.dbamp;
	snd = snd.fold2;
	snd = MoogFF.ar(snd, XLine.kr(ExpRand(500, 3000), ExpRand(500, 3000), duration), 2) * 5.dbamp;
	snd = snd.tanh * 8.dbamp;
	snd = Splay.ar(snd, 0.3);
	snd = snd + (Latch.ar(snd, Impulse.ar(XLine.kr(ExpRand(3000, 16e3), ExpRand(3000, 16e3)), duration)) * -5.dbamp);
	snd = (SinOsc.ar(freq * [1, 1 / 2]) * [0, -10].dbamp).sum + HPF.ar(snd, 300);
	snd = BHiShelf.ar(snd, 1200, 1, -10);
	snd = Limiter.ar(snd * 20.dbamp);
	snd = snd * Env.adsr(0.03, 0.1, 0.5, 0.01, curve: -1).ar(Done.freeSelf, \gate.kr(1));
	snd = snd * -3.dbamp;
	Out.ar(\out.kr(0), snd);
}).add;"
"synth, sustain, sustained, bell, gong, radio static, tonal, humming, hum","SynthDef(\glitch, {
	var snd, duration;
	duration = \duration.kr(1);
	snd = SinOsc.ar(ExpRand(100, 8000)) * Rand(1000, 3e3);
	5.do {
		snd = SinOsc.ar(ExpRand(100, 8000) + snd) * Rand(2e3, 8e3) * Line.kr(Rand(0.4, 1), Rand(0.4, 1), duration);
		snd = Latch.ar(snd, Impulse.ar(ExpRand(8000, 16e3)));
		snd = BPF.ar(snd, ExpRand(100, 8000), ExpRand(0.5, 0.9));
	};
	snd = SinOsc.ar(ExpRand(100, 3000) + snd);
	snd = snd * Line.kr(Rand(0, 1), Rand(0, 1), duration);
	snd = MoogFF.ar(snd, 4000, 0);
	snd = snd * Env.asr(0, 1, 0).ar(Done.freeSelf, \gate.kr(1));
	snd = snd * -5.dbamp;
	snd = Pan2.ar(snd, \pan.kr(0));
	Out.ar(\out.kr(0), snd);
}).add;"
"synth, fx, effect, effects","SynthDef(\fx, {
	var snd, trigger, dry, probability;
	snd = In.ar(\out.kr(0), 2);
	dry = snd;
	trigger = \trigger.tr;
	probability = \probability.kr(0.2);
	4.do {
		snd = SelectX.ar(Latch.kr(CoinGate.kr(probability, trigger), trigger).lag(0.01), [
			snd,
			snd + (LPF.ar(GVerb.ar(snd.sum, Rand(30, 50), Rand(1, 3)), 3000) * -10.dbamp)
		]);
		snd = SelectX.ar(Latch.kr(CoinGate.kr(probability, trigger), trigger).lag(0.01), [
			snd,
			snd + PitchShift.ar(snd, Rand(0.02, 0.05), 1 + Amplitude.ar(snd, 0.01, 0.1))
		]);
		snd = SelectX.ar(Latch.kr(CoinGate.kr(probability, trigger), trigger).lag(0.01), [
			snd,
			snd + DelayC.ar(snd, 0.2, SinOsc.ar(Rand(0.1, 0.3), [0, pi]).linlin(-1, 1, 0, 1) * 1e-3)
		]);
		snd = SelectX.ar(Latch.kr(CoinGate.kr(probability, trigger), trigger).lag(0.01), [
			snd,
			FreqShift.ar(snd, Rand(-30, 30))
		]);
		snd = SelectX.ar(Latch.kr(CoinGate.kr(probability, trigger), trigger).lag(0.01), [
			snd,
			BPF.ar(snd, LFNoise2.kr(3).linexp(-1, 1, 100, 8000), 0.5)
		]);
	};
	snd = (dry * 3.dbamp) + (snd * (1 - (0.5 * Amplitude.ar(dry, 0.01, 0.1))).clip(0, 1));
	snd = HPF.ar(snd, 20);
	snd = Limiter.ar(snd);
	ReplaceOut.ar(\out.kr(0), snd);
}).add;"
"drum, kick, hard, transient, punchy","SynthDef(\kick, {
	var snd;
	snd = SinOsc.ar(59 * (1 + (5 * Env.perc(0, 0.1, curve: -8).ar)) * (1 + (0.4 * Env.perc(0, 0.2, curve: -2).ar)));
	snd = snd + (SinOsc.ar(XLine.ar(7000, 100, 0.03)) * Env.perc(0.002, 0.03).ar);
	snd = snd + (BPF.ar(Hasher.ar(Sweep.ar), 8130, 0.5) * Env.perc(0.001, 0.03).ar * -9.dbamp);
	snd = snd * (1 + Env.perc(0.0, 0.5).ar);
	snd = snd.tanh;
	snd = snd * Env.perc(0.001, 0.5, curve: -4).ar(Done.freeSelf);
	snd = snd * -4.dbamp;
	snd = snd ! 2;
	Out.ar(\out.kr(0), snd);
}).add;"
"drum, kick, ghostkick, ghost kick, fast, quick, short","SynthDef(\ghostKick, {
	var snd;
	snd = SinOsc.ar(49 * (1 + (5 * Env.perc(0, 0.1, curve: -8).ar)) * (1 + (0.4 * Env.perc(0, 0.2, curve: -2).ar)));
	snd = snd + (SinOsc.ar(XLine.ar(4000, 100, 0.03)) * Env.perc(0.002, 0.03).ar);
	snd = snd + (BPF.ar(Hasher.ar(Sweep.ar), 8130, 0.5) * Env.perc(0.001, 0.03).ar * -9.dbamp);
	snd = snd * (1 + Env.perc(0.0, 0.5).ar);
	snd = snd.tanh;
	snd = snd * Env.perc(0.001, 0.1, curve: -4).ar(Done.freeSelf);
	snd = snd * -4.dbamp;
	snd = snd ! 2;
	Out.ar(\out.kr(0), snd);
}).add;"
"drum, clap, dry clap, dry, house, classic house, classic, standard, regular","SynthDef(\clapDry, {
	var snd;
	snd = Hasher.ar(Sweep.ar + [0, 1, 2]);
	snd = BPF.ar(snd, 1135 * [0.9, 1.0, 1.16], 0.1) * 13.dbamp;
	snd = snd * Env.perc(0.001, 0.2, curve: -6).delay([0, 1, 2] * 2e-2).ar;
	snd = Splay.ar(snd, 0.5);
	snd = snd * 8.dbamp;
	snd = snd * \amp.kr(1);
	snd = snd * Env.linen(0, 0.3, 0.1).ar(Done.freeSelf);
	Out.ar(\out.kr(0), snd);
}).add;"
"drum, clap, long, long tail, tail, release, long release, wet, reverb, echo","SynthDef(\clapWet, {
	var snd;
	snd = Hasher.ar(Sweep.ar + [0, 1, 2]);
	snd = BPF.ar(snd, 1105 * [0.9, 1.0, 1.16], 0.1) * 13.dbamp;
	snd = snd * Env.perc(0.001, \decay.kr(0.9), curve: -6).delay([0, 1, 2] * 2e-2).ar;
	snd = Splay.ar(snd, 0.3);
	snd = snd * -3.dbamp;
	snd = snd * Env.linen(0, \decay.kr(0.9), 0.1).ar(Done.freeSelf);
	Out.ar(\out.kr(0), snd);
}).add;"
"drum, hat, closed, chiptune, white noise, noisy, noise short, very short, small, clicky, click, tick","SynthDef(\hat, {
	var snd;
	snd = SinOsc.ar(1320) * Env.perc(0.001, 0.03).ar * 8000;
	snd = SinOsc.ar(3340 + snd) * Env.perc(0.001, 0.1).ar * 16000;
	snd = SinOsc.ar(1220 + snd);
	snd = snd + Hasher.ar(Sweep.ar);
	snd = BPF.ar(snd, [3844, 12844, 5249], 0.3);
	snd = snd * [-10, -5, 0].dbamp;
	snd = snd.sum;
	snd = snd * Env.perc(0.003, 0.05, curve: -8).ar(Done.freeSelf);
	snd = Pan2.ar(snd, \pan.kr(0));
	Out.ar(\out.kr(0), snd);
}).add;"
"synth, sustain, sustained, bass, wavering, upsweep, pitched up, pitched, hovering, floating","SynthDef(\bass, {
	var snd;
	snd = Pulse.ar(\freq.kr(100) * XLine.kr(1, \bend.kr(5).midiratio, 0.3) * [-0.1, 0, 0.1].midiratio);
	snd = Splay.ar(snd);
	snd = MoogFF.ar(snd, LFNoise2.kr(8).linexp(-1, 1, 500, 8000), 2.3) * 15.dbamp;
	snd = snd.fold2;
	snd = MoogFF.ar(snd, LFNoise2.kr(5).linexp(-1, 1, 500, 16000), 1.3) * 5.dbamp;
	snd = snd + CombC.ar(snd, 0.1, 1 / 95, 0.1);
	snd = snd * Env.asr(0.3, 1, 0.03).ar(Done.freeSelf, \gate.kr(1));
	snd = snd * \amp.kr(1);
	snd = snd * -12.dbamp;
	Out.ar(\out.kr(0), snd);
}).add;"
"synth, lfo, voluming changing, wavy, wavering, pitchup, pitched up, pitched, bass, tonal, hovering, hover","SynthDef(\bass2, {
	var snd, auto, freq;
	freq = \freq.kr(100) * XLine.kr(1, \bend.kr(5).midiratio, 1) * [-0.1, 0, 0.1].midiratio;
	auto = SinOsc.ar(1 / \beat.kr(1), 1.5pi).linlin(-1, 1, 0, 1);
	snd = Pulse.ar(freq);
	snd = Splay.ar(snd);
	snd = MoogFF.ar(snd, auto.linexp(0, 1, 600, 4000), 2.3) * 15.dbamp;
	snd = snd.fold2;
	snd = MoogFF.ar(snd, auto.linexp(0, 1, 500, 16000), 0.3) * 8.dbamp;
	snd = snd * auto;
	snd = snd + CombC.ar(snd, 0.1, 1 / \combFreq.kr(125), \combDecay.kr(0.1));
	snd = snd * 3.dbamp;
	snd = snd * Env.asr(0.3, 1, 0.03).ar(Done.freeSelf, \gate.kr(1));
	snd = snd * \amp.kr(1);
	snd = snd * -12.dbamp;
	Out.ar(\out.kr(0), snd);
}).add;"
"synth, pad, tonal, radio static, static, radio, sine, sin, sinewave, sinwave, beautiful, complex","SynthDef(\pad, {
	var snd, env, pitchEnv;
	env = Env.perc(0.03, 0.5).ar(Done.none, \duck.tr);
	snd = Saw.ar(\freq.kr(440) * (LFNoise2.kr(3 ! 8) * 0.1).midiratio);
	snd = Splay.ar(snd);
	snd = MoogFF.ar(snd, LFNoise2.kr(3).linexp(-1, 1, 500, 1000) * (env.neg * 8).midiratio, 1.5) * 10.dbamp;
	snd = Latch.ar(snd, Impulse.ar(LFNoise2.kr(3).linexp(-1, 1, 4e3, 16e3)));
	snd = snd * (1 - env);
	snd = snd * Env.asr(0.1, 1, 0.1).ar(Done.freeSelf, \gate.kr(1));
	snd = snd * \amp.kr(1);
	snd = snd * -12.dbamp;
	Out.ar(\out.kr(0), snd);
}).add;"
"synth, loud, vibrato, vibrating, tonal, waving, wave, wavy","SynthDef(\bass3, {
        var snd, env, freq;
        env = Env.perc(0.03, 0.6).ar(Done.none, \duck.tr);
        freq = \freq.kr(440);
        snd = Pulse.ar(freq * [-0.1, 0.1].midiratio, 0.5);
        snd = MoogFF.ar(snd, 3000 * (LFNoise2.kr(1) * 10).midiratio, 1) * 10.dbamp;
        snd = SinOsc.ar(freq) + HPF.ar(snd.tanh, 300);
        snd = snd * (1 - env);
        snd = snd * Env.asr(0.1, 1, 0.1).ar(Done.freeSelf, \gate.kr(1));
        snd = snd * \amp.kr(1);
        snd = snd * -15.dbamp;
        Out.ar(\out.kr(0), snd);
}).add;"
"synth, bass, pluck, house, deep, techno, bass house, deep, cool, layered, layer, detuned, detune, hit","SynthDef(\pluck, {
        var snd, freq;
        freq = 60 * \transpose.kr(0).midiratio;
        snd = Pulse.ar(freq * [-0.1, 0.1].midiratio);
        snd = MoogFF.ar(snd, Env.perc(0.001, 0.2).ar.linexp(0, 1, 100, 8000), 1);
        snd = snd * (1 + (SinOsc.ar(963) * Env.perc(0, 0.1).ar));
        snd = snd * Env.perc(0.001, 0.2, curve: -1).ar;
        snd = snd + (GVerb.ar(snd.sum, 20, 1) * -10.dbamp);
        snd = snd * Env.perc(0.001, 0.5, curve: -1).ar(Done.freeSelf);
        snd = snd * \amp.kr(1);
        snd = snd * 3.dbamp;
        Out.ar(\out.kr(0), snd);
}).add;"
"drum, kick, deep, house, dubstep, short, quick, subdued, dark, dull, small","SynthDef(\kick, {
	var snd;
	snd = SinOsc.ar(Env([2000, 400, 95, 60], [0.005, 0.01, 0.1], [\exp, \exp, \exp]).ar);
	snd = snd + (BPF.ar(Hasher.ar(Sweep.ar + [0, 1]), 4400, 0.3) * 10.dbamp * Env.perc(0, 0.01).ar);
	snd = snd + (BPF.ar(Hasher.ar(Sweep.ar + [1, 0]), 2400, 0.3) * -5.dbamp * Env.perc(0, 0.05).ar);
	snd = snd * Env.perc(0.006, 0.2).ar(Done.freeSelf);
	snd = (snd * 3).tanh;
	snd = snd * \amp.kr(0.1);
	Out.ar(\out.kr(0), snd);
}).add;"
"drum, clap, house, classic, standard","SynthDef(\clap, {
	var snd;
	snd = BPF.ar(Hasher.ar(Sweep.ar), [1100, 1150, 1230] * 1.2, 0.5) * Env.perc(0.001, 0.15).delay([0, 0.013, 0.023]).ar * 12.dbamp;
	snd = Splay.ar(snd, 0.7) * 5.dbamp;
	snd = LPF.ar(Latch.ar(LPF.ar(snd, 8000), Impulse.ar(16e3)), 12000);
	snd = snd * Env.perc(0.0, 0.2, curve: 1).ar(Done.freeSelf);
	snd = snd * \amp.kr(0.1);
	Out.ar(\out.kr(0), snd);
}).add;"
"drum, hat, open, medium-length, tail, open hi hat, hi-hat,high hat","SynthDef(\hat, {
        var snd;
        snd = (BPF.ar(Hasher.ar(Sweep.ar), [10e3, 8e3, 14e3], 0.2) * Env.perc([0.01, 0.03, 0.02], [0.2, 0.15, 0.32], curve: 1).ar);
        snd = Splay.ar(snd, 0.5) * 7.dbamp;
        snd = (snd + (snd.tanh * -5.dbamp)) * -5.dbamp;
        snd = snd * Env.perc(0.0, \decay.kr(0.19), curve: -6).ar(Done.freeSelf);
        snd = snd * \amp.kr(0.1);
        snd = snd ! 2;
        Out.ar(\out.kr(0), snd);
}).add;"
"synth, bass, short, error, moog, deep, korg, staccato","SynthDef(\bass, {
	var snd, freq, brightness;
	freq = \freq.kr(60);
	snd = (Pulse.ar(freq * (Env.perc(0.0, 0.03).ar * 24).midiratio * [1, 2]) * [0, -10].dbamp).sum;
	snd = snd ! 2;
	brightness = \brightness.kr(0);
	snd = MoogFF.ar(snd, brightness.linexp(0, 1, 200, 500), 3) * 20.dbamp;
	snd = snd.fold2;
	snd = MoogFF.ar(snd, brightness.linexp(0, 1, 2000, 900), 3) * 10.dbamp;
	snd = snd.tanh;
	snd = LPF.ar(snd, brightness.linexp(0, 1, 1000, 3000));
	snd = HPF.ar(snd, 400);
	snd = (snd * 3.dbamp) + SinOsc.ar(freq);
	snd = snd * -5.dbamp;
	snd = snd * Env.perc(0.001, 0.12, curve: 10).ar(Done.freeSelf);
	snd = snd * \amp.kr(0.1);
	Out.ar(\out.kr(0), snd);
}).add;"
"synth, bright, stab, pluck, vibrant, 90s, detuned, stereo, voice","SynthDef(\synth, {
	var snd, freq;
	freq = \freq.kr(60);
	freq = freq * [-0.1, 0.1].midiratio;
	snd = Pluck.ar(PinkNoise.ar, Impulse.ar(0), 0.1, freq.reciprocal, 3.0, 0.2) * 22.dbamp;
	snd = snd * Env.adsr(0.02, 0.3, 0.0, 0.05).ar(Done.freeSelf, \gate.kr(1));
	snd = snd * \amp.kr(0.1);
	Out.ar(\out.kr(0), snd);
}).add;"
"synth, pad, moog, bass, drone, droning, sustained, sustain","SynthDef(\pad, {
	var snd, freq;
	freq = \freq.kr(60);
	snd = Saw.ar(freq);
	snd = DelayN.ar(snd, 0.01, { Rand(0, 0.005) } ! 4);
	snd = RLPF.ar(snd, LFNoise2.kr(1 ! 4).exprange(500, 1200), 0.1);
	snd = Splay.ar(snd);
	snd = LPF.ar(snd, 3000);
	snd = snd * Env.asr(0.3, 1, 1).ar(Done.freeSelf, \gate.kr(1));
	snd = snd * 6.dbamp;
	snd = snd * \amp.kr(0.1);
	Out.ar(\out.kr(0), snd);
}).add;"
"drum, kick, bassdrum, bass drum, small, soft, dull, lower volume, low, fast, quick","SynthDef(\kick, {
	var snd;
	snd = SinOsc.ar(\freq.kr.linexp(0, 1, 45, 65) * (1 + (3 * Env.perc(0.001, \bend.kr.linexp(0, 1, 0.03, 0.2), curve: -8).ar)));
	snd = snd * (1 + (5 * Env.perc(0, 0.01).ar));
	snd = snd + (BPF.ar(Hasher.ar(Sweep.ar), 8320, 0.3) * Env.perc(0.001, 0.01).ar * -5.dbamp);
	snd = snd * \drive.kr.linexp(0, 1, 0.5, 3);
	snd = snd.tanh;
	snd = snd * -10.dbamp;
	snd = snd * \velocity.kr(1);
	snd = snd * (1 + Env.perc(0, 0.02).ar);
	snd = snd * Env.perc(0.001, \decay.kr.linexp(0, 1, 0.1, 0.7)).ar(Done.freeSelf);
	snd = Pan2.ar(snd, \pan.kr(0));
	snd = snd * \amp.kr(1);
	Out.ar(\out.kr(0), snd);
}).add;"
"drum, snare, soft, classic, drum machine, machine, 909","SynthDef(\snare, {
	var snd;
	snd = SinOsc.ar(\freq.kr.linexp(0, 1, 200, 260) * (1 + (0.3 * Env.perc(0.001, 0.01, curve: -8).ar)) * [1, 2.3, 5.6, 8.9]);
	snd = snd * ([1] ++ Env.perc(0, [0.1, 0.03, 0.15] * \clankiness.kr.linexp(0, 1, 1, 3)).ar);
	snd = snd * [0, -8, -5, -15].dbamp * ([1] ++ (\clankiness.kr.linlin(0, 1, 0.1, 1) ! 3));
	snd = snd.sum;
	snd = snd * \velocity.kr(1);
	snd = snd + (BPF.ar(Hasher.ar(Sweep.ar), \brushFreq.kr.linexp(0, 1, 1200, 3200), 0.3) * Env.perc(0.05, 0.1).ar * -1.dbamp * \drive.kr.linlin(0, 1, -3, 5).dbamp);
	snd = snd * (1 + (10 * Env.perc(0, 0.01).ar * \transient.kr.sqrt));
	snd = (snd * \drive.kr.linlin(0, 1, -2, 5).dbamp).tanh;
	snd = snd * -3.dbamp * \isGhost.kr.linlin(0, 1, 0, -7).dbamp;
	snd = snd * Env.perc(0.001, \decay.kr.linexp(0, 1, 0.09, 0.15) * \isGhost.kr.linexp(0, 1, 1, 0.2), curve: -1).ar(Done.freeSelf);
	snd = Pan2.ar(snd, \pan.kr(0));
	snd = snd * \amp.kr(1);
	Out.ar(\out.kr(0), snd);
}).add;"
"drum, hat, hihat, hi-hat, high hat, closed, close, small, click, flick","SynthDef(\hat, {
	var snd;
	snd = SinOsc.ar([1324, 2359, 4530, 4539] * 3) * [3425, 2485, 3492, 4728] * Env.perc(0.002, 0.01).ar;
	snd = SinOsc.ar(([5848, 4378, 4378, 2783] * 1) + snd);
	snd = snd.sum.fold2;
	snd = snd + (Hasher.ar(Sweep.ar));
	snd = snd.tanh;
	snd = RHPF.ar(snd, 3210 * \freq.kr.linexp(0, 1, 0.5, 2), 0.3);
	snd = BRF.ar(snd, 4329, 0.3);
	snd = snd * \velocity.kr(1);
	snd = snd * -16.dbamp;
	snd = snd * (1 + (3 * Env.perc(0, 0.01).ar)) / 3;
	snd = snd * Env.perc(\attack.kr.linexp(0, 1, 0.001, 0.01), \decay.kr.linexp(0, 1, 0.01, 0.05), curve: -1).ar(Done.freeSelf);
	snd = Pan2.ar(snd, \pan.kr(0));
	snd = snd * \amp.kr(1);
	Out.ar(\out.kr(0), snd);
}).add;"
"synth, bass, sustained, sustain, moog, reese, low, dark","SynthDef(\bass, {
        var snd, freq, dry;
        freq = \freq.kr(60);
        snd = SinOsc.ar(freq * XLine.kr(2, 1, 0.03));
        dry = snd;
        snd = DelayC.ar(HPF.ar((snd * 12.dbamp).tanh, 900), 0.2, SinOsc.ar(3, [0, pi]).linlin(-1, 1, 0, 1) * 0.5e-3);
        snd = dry + (snd * -1.dbamp);
        snd = snd * Env.adsr(0.001, 0.1, 0.9, 0.02).ar(Done.freeSelf, \gate.kr(1));
        snd = snd * -8.dbamp;
        snd = snd * \amp.kr(1);
        Out.ar(\out.kr(0), snd);
}).add;"
"synth, bass, sustained, sustain, swell, acid, loud, bright","SynthDef(\bass2, {
	var snd, freq, dry;
	freq = \freq.kr(60);
	snd = Pulse.ar(freq);
	snd = MoogFF.ar(snd, (Line.kr(0, 1, 0.9) ** 0.6).linexp(0, 1, 200, 4200), 0.9) * 5.dbamp;
	snd = Pan2.ar(snd, \pan.kr(0));
	snd = snd * Env.asr(0.1, 1, 0.03).ar(Done.freeSelf, \gate.kr(1));
	snd = snd * -8.dbamp;
	snd = snd * \amp.kr(1);
	Out.ar(\out.kr(0), snd);
}).add;"
"drum, kick, bassdrum, bass drum, chiptune, fast, sharp","SynthDef(\kick, {
	var snd;
	snd = SinOsc.ar(50 * (1 + (6 * Env.perc(0.001, 0.1, curve: -6).ar)) * (1 + Env.perc(0, 0.5).ar));
	snd = snd + (BPF.ar(Hasher.ar(Sweep.ar), 6230, 0.2) * Env.perc(0.01, 0.02).ar *  -10.dbamp);
	snd = snd + (2.dbamp * SinOsc.ar(XLine.ar(3000, 100, 0.01)) * Env.perc(0, 0.01).ar);
	snd = snd * (1 + (\drive.kr(0) * Env.perc(0, 0.3).ar));
	snd = (snd * (\drive.kr(0) * 20).dbamp).tanh;
	snd = snd * Env.perc(0.001, 0.3 * (1 + \drive.kr(0))).ar(Done.freeSelf);
	snd = snd * 10.dbamp;
	snd = Pan2.ar(snd, \pan.kr(0));
	Out.ar(\out.kr(0), snd);
}).add;"
"synth, pad, sustained, sustain, eerie, weird, hoover, floating, bright","SynthDef(\pad, {
	var snd;
	snd = LFTri.ar(\freq.kr(440) * ({ LFNoise2.kr(3) * 0.2 } ! 5).midiratio);
	snd = Splay.ar(snd);
	snd = (snd * -20.dbamp) + BPF.ar([snd], { ExpRand(800, 8120) } ! 3, 0.1).sum;
	snd = (snd * 16).round / 16;
	snd = snd * Env.asr(0.2, 1, 0.03, curve: 4).ar(Done.freeSelf, \gate.kr(1));
	snd = snd * -18.dbamp;
	Out.ar(\out.kr(0), snd);
}).add;"
"synth, bass, sustained, sustain, alternating, random, noise, slow, massive, synthesis, saw, wave, sawwave, tonal","SynthDef(\lead, {
	var snd, scale, trigger;
	trigger = Dust.ar(0.3);
	snd = LFSaw.ar(\freq.kr(440));
	snd = RLPF.ar(snd, TExpRand.ar(100, 8000, trigger).lag(0.01), 0.3).clip2;
	scale = 2 ** 8;
	snd = snd * scale;
	snd = snd bitAnd: TRand.ar(0, scale, trigger);
	snd = snd bitXor: TRand.ar(0, scale, trigger);
	snd = snd.linlin(0, scale, -1, 1);
	snd = snd * Env.asr(0.01, 1, 0.03, curve: 4).ar(Done.freeSelf, \gate.kr(1));
	snd = snd * -18.dbamp;
	snd = Pan2.ar(snd, TRand.ar(-0.5, 0.5, trigger));
	Out.ar(\out.kr(0), snd);
}).add;"
"synth, pad, phased, phase, flanger, flange, moving, sustain, sustained, varied, different","SynthDef(\lead2, {
        var snd, scale, trigger;
        snd = Saw.ar(\freq.kr(440));
        5.do {
                snd = snd + DelayC.ar(snd, 0.2, LFNoise2.kr(3 ! 2).linlin(-1, 1, 0, 1) * 1e-3);
        };
        snd = snd * -10.dbamp;
        snd = snd * Env.asr(0.01, 1, 0.03, curve: 4).ar(Done.freeSelf, \gate.kr(1));
        snd = snd * -28.dbamp;
        Out.ar(\out.kr(0), snd);
}).add;"
"synth, bass, distorted, sharp, gllitchy, random, interesting, lfo, ufo, weird, metallic","var lfo;

lfo = { |rate = 1|
	Select.ar(ToggleFF.ar(Dust.ar(rate)), [
		LFNoise2.ar(rate),
		TRand.ar(-1, 1, Dust.ar(rate * 3)),
	]);
};
SynthDef(\weirdBass, {
	var snd, rate, duration;
	duration = \duration.kr(1);
	rate = 1;
	snd = SinOsc.ar(90 * (2 ** lfo.(rate)));
	snd = (snd * lfo.(rate).linlin(-1, 1, 0, 20).lag(0.05).dbamp).fold2;
	snd = RLPF.ar(snd, lfo.(rate).lag(0.01).linexp(-1, 1, 1000, 2000), 0.3);
	snd = PitchShift.ar(snd, ExpRand(0.01, 0.04), XLine.kr(ExpRand(0.5, 1), ExpRand(0.5, 1), duration)) * 20.dbamp;
	snd = BLowShelf.ar(snd, 500, 0.3, 5);
	snd = Limiter.ar(snd);
	snd = (snd * 10.dbamp).fold2;
	snd = snd + (GVerb.ar(snd, ExpRand(1, 10), ExpRand(1, 3), maxroomsize: 10) * -20.dbamp);
	snd = snd + (PitchShift.ar(snd, ExpRand(0.001, 0.04), XLine.kr(ExpRand(0.5, 2), ExpRand(0.5, 2), duration)) * 6.dbamp);
	snd = snd * Env.asr(0.3, 1, 0.01, curve: 4).ar(Done.freeSelf, \gate.kr(1));
	snd = snd * -15.dbamp;
	Out.ar(\out.kr(0), snd);
}).add;
)"
"synth, bass, sharp, phased, weird, phase, glitchy, lfo, alien","var lfo;

lfo = { |rate = 1|
	Select.ar(ToggleFF.ar(Dust.ar(rate)), [
		LFNoise2.ar(rate),
		TRand.ar(-1, 1, Dust.ar(rate * 3)),
	]);
};
SynthDef(\weirdBass2, {
	var snd, rate, duration;
	duration = \duration.kr(1);
	rate = XLine.kr(1, 16, duration);
	snd = SinOsc.ar(3040 * (2 ** (2 * lfo.(rate)))) * lfo.(rate).lag(0.01) * 3000;
	snd = SinOsc.ar((140 * (2 ** (2 * lfo.(rate)))) + snd);
	snd = (snd * lfo.(rate).linlin(-1, 1, 10, 20).lag(0.01).dbamp).fold2;
	snd = BPF.ar(snd, lfo.(rate ! 3).lag(0.02).linexp(-1, 1, 800, 1000) * [0.5, 1.56, 1.34], 0.1).sum;
	snd = LPF.ar(snd, XLine.kr(3000, 16e3, duration));
	snd = Latch.ar(snd, Impulse.ar(lfo.(3).linexp(-1, 1, 1000, 16e3)));
	snd = LPF.ar(snd, XLine.kr(3000, 8e3, duration));
	snd = (snd * 3).tanh * 5.dbamp;
	snd = BHiShelf.ar(snd, 3000, 1, -5);
	snd = Pan2.ar(snd, \pan.kr(0));
	snd = snd * Env.asr(0.3, 1, 0.01, curve: 4).ar(Done.freeSelf, \gate.kr(1));
	snd = snd * -15.dbamp;
	Out.ar(\out.kr(0), snd);
}).add;"
"drum, snare, hit, rim, tonal, distorted, loud, trash can, can, distort, noise, noisy, ring, ringy","SynthDef(\snare, {
	var snd;
	snd = SinOsc.ar(330 * (1 + (6 * Env.perc(0.001, 0.03, curve: -6).ar)));
	snd = snd + (BPF.ar(Hasher.ar(Sweep.ar), 2230, 0.2) * Env.perc(0.05, 0.1).ar * -5.dbamp);
	snd = snd + (5.dbamp * SinOsc.ar(XLine.ar(3000, 100, 0.01)) * Env.perc(0, 0.01).ar);
	snd = snd ! 2;
	snd = snd + PitchShift.ar(snd, 0.04, 1.3, 0.001, 0.001);
	snd = snd + PitchShift.ar(snd * 3.dbamp, 0.03, 1.6, 0.001, 0.001);
	snd = snd + PitchShift.ar(snd * 1.dbamp, 0.06, 3.6, 0.01, 0.01);
	snd = snd + FreqShift.ar(snd, 130);
	snd = snd * (1 + (2 * Env.perc(0, 0.1).ar));
	snd = LeakDC.ar(snd);
	snd = (snd * (\drive.kr(0) * 10).dbamp).tanh;
	snd = snd * Env.adsr(0.001, 0.6 * (1 + \drive.kr(0)), 0, 0.01).ar(Done.freeSelf, \gate.kr(1));
	snd = snd * 10.dbamp;
	Out.ar(\out.kr(0), snd);
}).add;"
"synth, pad, sustain, sustained, melodic, soft, quiet, ring, lead","SynthDef(\pad, {
	var snd;
	snd = LFTri.ar(\freq.kr(440) * ({ LFNoise2.kr(3) * 0.2 } ! 5).midiratio);
	snd = Splay.ar(snd);
	snd = (snd * -20.dbamp) + BPF.ar([snd], { ExpRand(800, 8120) } ! 3, 0.1).sum;
	snd = (snd * 16).round / 16;
	snd = snd * Env.asr(0.2, 1, 0.03, curve: 4).ar(Done.freeSelf, \gate.kr(1));
	snd = snd * -18.dbamp;
	Out.ar(\out.kr(0), snd);
}).add;"
"synth, lead, boxy, box, loud, sustain, sustained, chiptune, saw, sawwave, wave, glitchy","SynthDef(\lead, {
	var snd, scale, trigger;
	trigger = Dust.ar(0.3);
	snd = LFSaw.ar(\freq.kr(440));
	snd = RLPF.ar(snd, TExpRand.ar(100, 8000, trigger).lag(0.01), 0.3).clip2;
	scale = 2 ** 8;
	snd = snd * scale;
	snd = snd bitAnd: TRand.ar(0, scale, trigger);
	snd = snd bitXor: TRand.ar(0, scale, trigger);
	snd = snd.linlin(0, scale, -1, 1);
	snd = snd * Env.asr(0.01, 1, 0.03, curve: 4).ar(Done.freeSelf, \gate.kr(1));
	snd = snd * -18.dbamp;
	snd = Pan2.ar(snd, TRand.ar(-0.5, 0.5, trigger));
	Out.ar(\out.kr(0), snd);
}).add;"
"synth, lead, sustain, sustained, phased, phasey, phase","SynthDef(\bass, {
	var snd, freq;
	freq = \freq.kr(440);
	snd = Saw.ar(freq);
	5.do {
		snd = snd + DelayC.ar(snd, 0.2, LFNoise2.kr(3 ! 2).linlin(-1, 1, 0, 1) * 2e-3);
	};
	snd = (SinOsc.ar(freq) * 3).tanh + (HPF.ar(snd, 400) * -10.dbamp);
	snd = snd * -10.dbamp;
	snd = snd * Env.asr(0.01, 1, 0.03, curve: 4).ar(Done.freeSelf, \gate.kr(1));
	snd = snd * -20.dbamp;
	Out.ar(\out.kr(0), snd);
}).add;"
"synth, sawtooth, sawwave, wave, chiptune, sustain, sustained, loud","SynthDef(\acid, {
	var snd, freq, duration;
	duration = \duration.kr(1);
	freq = \freq.kr(440);
	snd = Saw.ar(freq);
	snd = Latch.ar(snd, Impulse.ar(ExpRand(3e3, 16e3)));
	snd = MoogFF.ar(snd, (ExpRand(100, 2000) * (Env.perc(0.001, Rand(0.1, 0.3)).ar * Rand(10, 30)).midiratio * [1, 1.5]).min(16e3), 3).sum;
	snd = (snd * 3).fold2;
	snd = snd * Env.asr(0.001, 1, 0.03).ar(Done.freeSelf, \gate.kr(1));
	snd = snd * -20.dbamp;
	snd = Pan2.ar(snd, \pan.kr(0));
	Out.ar(\out.kr(0), snd);
}).add;"
"synth, sustain, sustained, lead, phased, phase, phasey, bright, wave, wavey","SynthDef(\lead2, {
	var snd, scale, trigger;
	snd = Saw.ar(\freq.kr(440));
	5.do {
		snd = snd + DelayC.ar(snd, 0.2, LFNoise2.kr(3 ! 2).linlin(-1, 1, 0, 1) * 1e-3);
	};
	snd = snd * -10.dbamp;
	snd = snd * Env.asr(0.01, 1, 0.03, curve: 4).ar(Done.freeSelf, \gate.kr(1));
	snd = snd * -28.dbamp;
	Out.ar(\out.kr(0), snd);
}).add;"
"synth, sustain, sustained, lead, phased, phase, phasey, bright, wave, wavey","SynthDef(\bass, {
	var snd, freq;
	freq = \freq.kr(440);
	snd = Saw.ar(freq);
	5.do {
		snd = snd + DelayC.ar(snd, 0.2, LFNoise2.kr(3 ! 2).linlin(-1, 1, 0, 1) * 2e-3);
	};
	snd = (SinOsc.ar(freq) * 3).tanh + (HPF.ar(snd, 400) * -10.dbamp);
	snd = snd * -10.dbamp;
	snd = snd * Env.asr(0.01, 1, 0.03, curve: 4).ar(Done.freeSelf, \gate.kr(1));
	snd = snd * -20.dbamp;
	Out.ar(\out.kr(0), snd);
}).add;"
"synth, fast, quick, drop, kick, pitchdown, pitch","SynthDef(\fastDrop, {
    var snd;
    snd = SinOsc.ar(60 * (1 + (4 * Env.perc(0, 0.2, curve: -6).ar)) * (1 + (0.3 * Env.perc(0, 0.7, curve: -3).ar)));
    snd = snd + (BLowPass.ar(Hasher.ar(Sweep.ar), 6120, 0.3) * Env.perc(0.001, 0.02).ar * -12.dbamp);
    snd = snd * (1 + Env.perc(0.0, 0.7).ar);
    snd = snd.cubed;
    snd = snd * Env.adsr(0.002, 0.5, 0, 0.01, curve: -5).ar(Done.freeSelf, \gate.kr(1));
    snd = snd * -6.dbamp;
    snd = snd.dup;
    Out.ar(\out.kr(0), snd);
}).add;"
"synth, sustain, sustained, acid, bright, lead, grunge, distorted, distort, loud","SynthDef(\acid, {
	var snd, freq, duration;
	duration = \duration.kr(1);
	freq = \freq.kr(440);
	snd = Saw.ar(freq);
	snd = Latch.ar(snd, Impulse.ar(ExpRand(3e3, 16e3)));
	snd = MoogFF.ar(snd, (ExpRand(100, 2000) * (Env.perc(0.001, Rand(0.1, 0.3)).ar * Rand(10, 30)).midiratio * [1, 1.5]).min(16e3), 3).sum;
	snd = (snd * 3).fold2;
	snd = snd * Env.asr(0.001, 1, 0.03).ar(Done.freeSelf, \gate.kr(1));
	snd = snd * -20.dbamp;
	snd = Pan2.ar(snd, \pan.kr(0));
	Out.ar(\out.kr(0), snd);
}).add;"
"drum, bassdrum, kick, layered, layer, transient","SynthDef(\kick, {
	var snd, velocity;
	velocity = \velocity.kr(1);
	snd = SinOsc.ar(58 * (1 + (3 * Env.perc(0.001, 0.03).ar) * velocity) * (1 + (0.5 * Env.perc(0.001, 0.3).ar) * velocity));
	snd = snd * (1 + (3 * Env.perc(0, 0.03).ar * velocity));
	snd = snd + (BPF.ar(Hasher.ar(Sweep.ar).pow(9.0), 16328, 0.3) * Env.perc(0.01, 0.04).ar * 5.dbamp);
	snd = snd.clip2;
	snd = snd.tanh;
	snd = snd * Env.perc(0.001, 0.5 * velocity).ar(Done.freeSelf);
	snd = snd * -3.dbamp;
	snd = snd * \amp.kr(1);
	snd = snd ! 2;
	Out.ar(\out.kr(0), snd);
}).add;"
"drum, snare, reverb, echo, long, wet, tom, high, tonal","SynthDef(\snare, {
	var snd, velocity;
	velocity = \velocity.kr(1);
	snd = SinOsc.ar(228 * (1 + (0.5 * Env.perc(0.003, 0.012).ar)) * [1, 1.6, 3.5, 6.4, 8.8]);
	snd = snd * Env.perc(0, [1, 0.6, 0.3, 0.05, 0.1]).ar;
	snd = snd * [0, -2, -5, -8, -12].dbamp;
	snd = snd.sum;
	snd = snd * (1 + (1.6 * Env.perc(0, 0.07).ar));
	snd = snd + (BPF.ar(Hasher.ar(Sweep.ar).pow(2.0), 2310, 0.3) * Env.perc(0.03, 0.16).ar * -2.dbamp);
	snd = LPF.ar(snd, velocity.linexp(0, 1, 1000, 16000));
	snd = (snd * -3.dbamp).clip2;
	snd = snd * Env.perc(0.001, \decay.kr(1) * 0.7, curve: -1).ar;
	snd = snd * -5.dbamp;
	snd = snd * velocity;
	snd = snd * \amp.kr(1);
	snd = Pan2.ar(snd, \pan.kr(0)) * 3.dbamp + GVerb.ar(snd * -15.dbamp, 10, 3);
	snd = snd * Env.perc(0.0, 3).ar(Done.freeSelf);
	Out.ar(\out.kr(0), snd);
}).add;"
"synth, fast, quick, drop, pitchdown, pitch, chiptune, blip, small, bright","SynthDef(\synth20, {
    var snd;
    snd = Pulse.ar(80 * (1 + (5 * Env.perc(0, 0.1, curve: -6).ar)) * (1 + (0.5 * Env.perc(0, 0.5, curve: -3).ar)));
    snd = snd + (BPF.ar(Hasher.ar(Sweep.ar), 6130, 0.3) * Env.perc(0.001, 0.02).ar * -10.dbamp);
    snd = snd * (1 + Env.perc(0.0, 0.4).ar);
    snd = snd.sin;
    snd = snd * Env.adsr(0.001, 0.6, 0, 0.01, curve: -8).ar(Done.freeSelf, \gate.kr(1));
    snd = snd * -3.dbamp;
    snd = snd ! 2;
    Out.ar(\out.kr(0), snd);
}).add;"
"drum, snare, standard, ","SynthDef(\snare2, {
        var snd, velocity;
        velocity = \velocity.kr(1);
        snd = SinOsc.ar(198 * (1 + (0.5 * Env.perc(0.003, 0.012).ar)) * [1, 1.6, 3.5, 6.4, 8.8]);
        snd = snd * Env.perc(0, [1, 0.6, 0.3, 0.05, 0.1]).ar;
        snd = snd * [0, -2, -5, -8, -12].dbamp;
        snd = snd.sum;
        snd = snd * (1 + (1.6 * Env.perc(0, 0.07).ar));
        snd = snd + (BPF.ar(Hasher.ar(Sweep.ar), 2310, 0.3) * Env.perc(0.03, 0.16).ar * 5.dbamp * velocity);
        snd = LPF.ar(snd, velocity.linexp(0, 1, 1000, 16000));
        snd = (snd * -3.dbamp).clip2;
        snd = snd * Env.perc(0.001, 0.7 * velocity, curve: -0.5).ar;
        snd = snd * -8.dbamp;
        snd = snd * velocity;
        snd = snd * \amp.kr(1);
        snd = Pan2.ar(snd, \pan.kr(0)) * 3.dbamp + GVerb.ar(snd * -15.dbamp, 10, 3);
        snd = snd * Env.perc(0.0, 1).ar(Done.freeSelf);
        Out.ar(\out.kr(0), snd);
}).add;"
"percussive, clap-like, short duration, noise generator, low-pass filter, sweep, ADSR envelope, negative gain, mono
","SynthDef(\percBass, {
    var snd;
    snd = SinOsc.ar(60, 0, (1 + (4 * Env.perc(0, 0.2, curve: -6).ar)));
    snd = snd + (BLowPass.ar(Hasher.ar(Sweep.ar), 6120, 0.3));
    snd = snd * Env.adsr(0.002, 0.5, 0, 0.01, curve: -5).ar(Done.freeSelf, \gate.kr(1));
    snd = snd * -6.dbamp;
    Out.ar(\out.kr(0), snd.dup);
}).add;"
"sawtooth wave, high frequency, percussive, high-pass filter, hashed, sweep, ADSR envelope, negative gain, stereo","SynthDef(\modSaw, {
    var snd;
    snd = Saw.ar(50, 0, (1 + (3 * Env.perc(0, 0.1, curve: -8).ar)));
    snd = snd + (BHiPass.ar(Hasher.ar(Sweep.ar), 6130, 0.3));
    snd = snd * Env.adsr(0.001, 0.5, 0, 0.01, curve: -7).ar(Done.freeSelf, \gate.kr(1));
    snd = snd * -2.dbamp;
    Out.ar(\out.kr(0), snd ! 2);
}).add;"
"sinusoidal, lead, mid-high frequency, percussive, band-pass filter, hashed, sweep, ADSR envelope, negative gain, stereo
","SynthDef(\sineLead, {
    var snd;
    snd = SinOsc.ar(440, 0, (1 + (2 * Env.perc(0, 0.1, curve: -4).ar)));
    snd = snd + (BPF.ar(Hasher.ar(Sweep.ar), 7000, 0.3));
    snd = snd * Env.adsr(0.001, 0.5, 0, 0.01, curve: -5).ar(Done.freeSelf, \gate.kr(1));
    snd = snd * -4.dbamp;
    Out.ar(\out.kr(0), snd ! 2);
}).add;"
"white noise, filtered, frequency sweep, band-pass filter, linear envelope, short attack, medium sustain, short release, stereo","SynthDef(\noiseSweep, {
    var snd;
    snd = WhiteNoise.ar(0.1);
    snd = BPF.ar(snd, XLine.kr(200, 8000, 5));
    snd = snd * Env.linen(0.1, 0.5, 0.1, 1).ar(Done.freeSelf);
    Out.ar(\out.kr(0), snd ! 2);
}).add;"
"pulse wave, saw, modulated, sinusoidal LFO, medium frequency, linear envelope, short attack, medium sustain, short release, stereo
","SynthDef(\pulsePad, {
    var snd, mod;
    mod = SinOsc.kr(0.2);
    snd = Pulse.ar(440, mod.range(0.1, 0.6));
    snd = snd * Env.linen(0.1, 0.5, 0.1, 1).ar(Done.freeSelf);
    Out.ar(\out.kr(0), snd ! 2);
}).add;"
"bell-like, high-pitched, resonant, bright, short-start, long-fade, stereo
","SynthDef(\fmBell, {
    var snd, mod;
    mod = SinOsc.ar(440 * 2);
    snd = SinOsc.ar(440, mod * 0.1);
    snd = snd * Env.perc(0.01, 1, 0.5).ar(Done.freeSelf);
    Out.ar(\out.kr(0), snd ! 2);
}).add;"
"organ, layered, multi-pitch, rich-harmonics, bright, short-start, medium-sustain, short-fade, stereo
","SynthDef(\spaceOrgan, {
    var snd, freqs, amps;
    freqs = [440, 880, 1320, 1760];
    amps = [1, 0.5, 0.33, 0.25];
    snd = Mix(SinOsc.ar(freqs, 0, amps));
    snd = snd * Env.linen(0.1, 0.5, 0.1, 1).ar(Done.freeSelf);
    Out.ar(\out.kr(0), snd ! 2);
}).add;"
"sinusoidal, sine, sinewave, sin, sweep, high-to-low, pitch, pitch-sweep, bouncing-effect, stereo, downsweep
","SynthDef(\bounceBall, {
    var snd, freq;
    freq = XLine.kr(1000, 100, 1, doneAction: Done.freeSelf);
    snd = SinOsc.ar(freq);
    Out.ar(\out.kr(0), snd ! 2);
}).add;"
"pulse wave, bass, low-frequency, wobble, modulated, sinusoidal LFO, ADSR envelope, quick-attack, medium-sustain, long-decay, negative gain, stereo, distorted, continuous, sustain, sustained ","SynthDef(\wobbleBass, {
    var snd, mod;
    mod = SinOsc.kr(6).range(0.1, 0.6);
    snd = Pulse.ar(60, mod);
    snd = snd * Env.adsr(0.01, 0.4, 0.6, 0.2).ar(Done.freeSelf, \gate.kr(1));
    snd = snd * -8.dbamp;
    Out.ar(\out.kr(0), snd ! 2);
}).add;"
"white noise, metallic, percussive, high-to-low frequency sweep, filtered, resonant low-pass filter, short-attack, long-decay, stereo, trash can, trash, laser, lazer
","SynthDef(\metallicPerc, {
    var snd;
    snd = RLPF.ar(WhiteNoise.ar(0.1), XLine.kr(8000, 100, 1));
    snd = snd * Env.perc(0.01, 1).ar(Done.freeSelf);
    Out.ar(\out.kr(0), snd ! 2);
}).add;"
"synth, saw, sawtooth, sawtooth wave, alien, communication, slightly detuned, frequency sweep, band-pass filter, short-start, medium-sustain, short-fade, mono, radio tuning, sci-fi
","SynthDef(\alienComm, {
    var snd;
    snd = LFSaw.ar([700, 701], 0, 0.1);
    snd = BPF.ar(snd, XLine.kr(500, 2000, 10));
    snd = snd * Env.linen(0.1, 0.5, 0.1, 1).ar(Done.freeSelf);
    Out.ar(\out.kr(0), snd);
}).add;"
"white noise, stretched, string, comb filter, long duration, decaying, resonance, linear envelope, short attack, medium sustain, short fade, stereo, reverb, echo, string instrument, drone","SynthDef(\stretchedString, {
    var snd;
    snd = CombL.ar(WhiteNoise.ar(0.01), 0.1, XLine.kr(0.01, 0.1, 10), 3);
    snd = snd * Env.linen(0.1, 0.5, 0.1, 1).ar(Done.freeSelf);
    Out.ar(\out.kr(0), snd ! 2);
}).add;"
"sinusoidal, lead, vibrato, medium-high frequency, linear envelope, short attack, medium sustain, short fade, stereo, sine
short","SynthDef(\vibratoLead, {
    var snd;
    snd = SinOsc.ar(Vibrato.kr(440, 0.02, 5, 1, 0.1));
    snd = snd * Env.linen(0.1, 0.5, 0.1, 1).ar(Done.freeSelf);
    Out.ar(\out.kr(0), snd ! 2);
}).add;"
"sinusoidal, sinewave, sin, percussive, short attack, layered, harmonic series, splayed, comb filter, noise modulation, limited, low gain, stereo, delay, long tail, long decay","SynthDef(\bell1, {
var snd;
snd = Mix.fill(8, { arg i;
var freq = 440 * 2.pow(i / 8);
SinOsc.ar(freq, 0, Env.perc(0.001, 0.1).ar)
});
snd = Splay.ar(snd);
snd = CombN.ar(snd, 0.2, LFNoise0.kr(1).range(0.1, 0.3), 8);
snd = Limiter.ar(snd);
snd = snd * 0.1;
Out.ar(0, snd ! 2);
}).add;"
"white noise, pink noise, pluck, comb filter, noise modulation, stereo panning, long decay, quiet, echo, sinewave, sin, long tail
","SynthDef(\piano1, {
var snd;
snd = Mix.fill(8, { arg i;
var freq = 440 * 2.pow(i / 8);
var env = EnvGen.kr(Env.perc(0.001, 1), doneAction: 2);
Pan2.ar(
CombN.ar(
Pluck.ar(PinkNoise.ar, freq, env),
0.2, LFNoise0.kr(1).range(0.01, 0.1), 4
),
LFNoise0.kr(1).range(-0.5, 0.5)
)
});
snd = Limiter.ar(snd);
snd = snd * 0.2;
Out.ar(0, snd);
}).add;
)"
"pad, sinusoidal, feedback oscillator, harmonic series, long attack, long release, reverb, limited, medium gain, sinewave, sin, drone, ambient, spacious, roomy, continuous, sustained, sustain","SynthDef(\pad1, {
var snd;
snd = Mix.fill(5, { arg i;
var freq = 440 * 2.pow(i / 5);
SinOscFB.ar(freq, 0.2)
});
snd = Mix(snd) * EnvGen.kr(Env([0,1,0.5], [3, 3], [-4, -4]), doneAction: 2);
snd = FreeVerb.ar(snd, room: 0.8);
snd = Limiter.ar(snd);
snd = snd * 0.3;
Out.ar(0, snd);
}).add;
"
"bass, triangle wave, low frequency, low-pass filter, random filter, percussive, short attack, medium decay, low shelf
","SynthDef(\bass2, {
var snd;
snd = LFTri.ar([60, 62]*2);
snd = RLPF.ar(snd, 800 + 800.rand, 0.2);
snd = snd * EnvGen.kr(Env.perc(0.01, 0.5, -4), doneAction: 2);
snd = LeakDC.ar(snd);
snd = BLowShelf.ar(snd, 80, 2, 6);
snd = Limiter.ar(snd);
Out.ar(0, snd);
}).add;"
"sinusoidal, sinewave, sin, sine, harmonic series, percussive, short attack, long decay, stereo panning, noise modulation, tanh distortion, reverb, limited, medium gain, abrupt, one-shot

","SynthDef(\keys1, {
var snd;
snd = Mix.fill(8, {arg i;
var freq = 440 * 2.pow(i / 8);
var env = EnvGen.kr(Env.perc(0.01, 1, -4), doneAction: 2);
var pos = LFNoise0.kr(1).range(-0.5, 0.5);
Pan2.ar(SinOsc.ar(freq, 0, env), pos)
});
snd = Mix(snd).tanh;
snd = FreeVerb.ar(snd, room: 0.5);
snd = Limiter.ar(snd);
snd = snd * 0.3;
Out.ar(0, snd);
}).add;"
"pad, sinusoidal, feedback oscillator, harmonic series, stereo panning, noise modulation, long attack, long decay, reverb, limited, medium gain, sinewave, sin, sine, sustained, sustain, continuous","SynthDef(\pad2, {
var snd;
snd = Mix.fill(3, {arg i;
var freq = 440 * 2.pow(i / 3);
SinOscFB.ar(freq, 0.4)
});
snd = Pan2.ar(snd, LFNoise0.kr(1).range(-0.5, 0.5));
snd = snd * EnvGen.kr(Env.perc(0.4, 3));
snd = GVerb.ar(snd, 12, 2);
snd = Limiter.ar(snd);
snd = snd * 0.4;
Out.ar(0, snd);
}).add;
"
"sinusoidal, high frequency, percussive, short attack, quick decay, harmonic series, splayed, all-pass filter, limited, low gain, alien, gun, sci-fi, rapid, one-shot, sinewave, sin, sine
","SynthDef(\bell2, {
var snd;
snd = Mix.fill(12, {arg i;
var freq = 440 * 2.pow(i / 12);
var env = EnvGen.kr(Env.perc(0.01, 0.1), doneAction: 2);
SinOsc.ar(freq, 0, env)
});
snd = Splay.ar(snd);
snd = AllpassN.ar(snd, 0.040, [0.050, 0.051, 0.049]);
snd = Limiter.ar(snd);
snd = snd * 0.2;
Out.ar(0, snd);
}).add;"
"bass, triangle wave, low frequency, resonant low-pass filter, percussive, short attack, medium decay, peak EQ, high shelf filter, limited, one-shot, low-end, dark, muted
","SynthDef(\bass4, {
var snd;
snd = LFTri.ar([50, 52]);
snd = RLPF.ar(snd, 100, 0.3);
snd = snd * EnvGen.kr(Env.perc(0.01, 0.6), doneAction: 2);
snd = LeakDC.ar(snd);
snd = BPeakEQ.ar(snd, 65, 1, 8);
snd = BHiShelf.ar(snd, 180, 1, -12);
snd = Limiter.ar(snd);
Out.ar(0, snd);
}).add;"
,"SynthDef(\guitar2, {
var snd;
snd = Mix.fill(4, {arg i;
var freq = Line.kr(300, 600, 8);
var env = EnvGen.kr(Env.perc(0.01, 0.5), doneAction: 2);
Gendy1.ar(freq, i*0.1, env)
});
snd = AllpassC.ar(snd, 0.1, [0.2, 0.201], 4);
snd = FreeVerb.ar(snd, mix: 0.6);
snd = Limiter.ar(snd);
snd = snd * 0.4;
Out.ar(0, snd);
}).add;"
,"SynthDef(\lead2, {
var snd;
snd = LFSaw.ar(
Line.kr(200, 600, 6)
).distort;
snd = snd * EnvGen.kr(Env.perc(0.01, 0.3, curve: -4), doneAction: 2);
snd = AllpassN.ar(snd, 0.05, [0.1, 0.1001, 0.0999], 2);
snd = snd + CombL.ar(DelayC.ar(snd, 0.4, 0.4), 0.2, 0.2, 4);
snd = FreeVerb.ar(snd, room: 0.7);
snd = Limiter.ar(snd);
snd = snd * 0.5;
Out.ar(0, snd);
}).add;"
,"SynthDef(\glassHit, {
    var snd;
    snd = SinOsc.ar([1000, 2000, 3000, 4000], 0, 0.2);
    snd = snd * Env.perc(0.01, 0.5).ar(Done.freeSelf);
    Out.ar(\out.kr(0), snd);
}).add;"
,"SynthDef(\stomp, {
    var snd;
    snd = SinOsc.ar(XLine.kr(100, 50, 0.2));
    snd = snd * Env.perc(0.01, 0.5).ar(Done.freeSelf);
    Out.ar(\out.kr(0), snd ! 2);
}).add;"
,"SynthDef(\zap, {
    var snd;
    snd = SinOsc.ar(XLine.kr(1000, 2000, 0.1));
    snd = snd * Env.perc(0.01, 0.2).ar(Done.freeSelf);
    Out.ar(\out.kr(0), snd ! 2);
}).add;"
,"SynthDef(\steelDrum, {
    var snd;
    snd = SinOsc.ar([200, 400, 600, 800], 0, 0.1);
    snd = snd * Env.perc(0.01, 0.5).ar(Done.freeSelf);
    Out.ar(\out.kr(0), snd);
}).add;"
,"SynthDef(\whistle, {
    var snd;
    snd = SinOsc.ar(XLine.kr(2000, 3000, 0.2));
    snd = snd * Env.perc(0.01, 0.5).ar(Done.freeSelf);
    Out.ar(\out.kr(0), snd ! 2);
}).add;"
,"SynthDef(\tambourine, {
    var snd;
    snd = WhiteNoise.ar(0.3);
    snd = HPF.ar(snd, 3000);
    snd = snd * Env.perc(0.01, 0.1).ar(Done.freeSelf);
    Out.ar(\out.kr(0), snd ! 2);
}).add;"
,"SynthDef(\cowbell, {
    var snd;
    snd = SinOsc.ar([560, 1120], 0, 0.2);
    snd = snd * Env.perc(0.01, 0.5).ar(Done.freeSelf);
    Out.ar(\out.kr(0), snd);
}).add;"
,"SynthDef(\triangle, {
    var snd;
    snd = SinOsc.ar([2000, 4000], 0, 0.2);
    snd = snd * Env.perc(0.01, 0.5).ar(Done.freeSelf);
    Out.ar(\out.kr(0), snd);
}).add;"
,"SynthDef(\windChime, {
    var snd;
    snd = Mix.fill(7, { |i| SinOsc.ar((i + 1) * 500, 0, 0.1) });
    snd = DelayC.ar(snd, 0.5, { Rand(0.1, 0.5) });
    snd = snd * Env.perc(0.01, 1).ar(Done.freeSelf);
    Out.ar(\out.kr(0), snd);
}).add;"
,"SynthDef(\conga, {
    var snd;
    snd = SinOsc.ar([200, 250], 0, 0.2);
    snd = snd * Env.perc(0.01, 0.5).ar(Done.freeSelf);
    Out.ar(\out.kr(0), snd);
}).add;"
,"SynthDef(\woodBlock, {
    var snd;
    snd = SinOsc.ar([800, 850], 0, 0.2);
    snd = snd * Env.perc(0.01, 0.5).ar(Done.freeSelf);
    Out.ar(\out.kr(0), snd);
}).add;"
,"SynthDef(\timbale, {
    var snd;
    snd = SinOsc.ar([500, 550], 0, 0.2);
    snd = snd * Env.perc(0.01, 0.5).ar(Done.freeSelf);
    Out.ar(\out.kr(0), snd);
}).add;"
,"SynthDef(\tamboura, {
    var snd;
    snd = Mix.fill(7, { |i| SinOsc.ar((i + 1) * 100, 0, 0.1) });
    snd = DelayC.ar(snd, 0.5, { Rand(0.1, 0.5) });
    snd = snd * Env.perc(0.01, 1).ar(Done.freeSelf);
    Out.ar(\out.kr(0), snd);
}).add;"
,"SynthDef(\guiro, {
    var snd;
    snd = WhiteNoise.ar(0.3);
    snd = HPF.ar(snd, 1000);
    snd = snd * Env.perc(0.01, 0.2).ar(Done.freeSelf);
    Out.ar(\out.kr(0), snd ! 2);
}).add;"
,"SynthDef(\vibraslap, {
    var snd;
    snd = WhiteNoise.ar(0.3);
    snd = BPF.ar(snd, XLine.kr(1000, 100, 0.2));
    snd = snd * Env.perc(0.01, 0.3).ar(Done.freeSelf);
    Out.ar(\out.kr(0), snd ! 2);
}).add;"
,"SynthDef(\hardKick, {
    var snd;
    snd = SinOsc.ar(50 * (1 + (5 * Env.perc(0, 0.1, curve: -8).ar)) * (1 + (0.4 * Env.perc(0, 0.5, curve: -2).ar)));
    snd = snd * Env.adsr(0.001, 0.5, 0, 0.01, curve: -7).ar(Done.freeSelf, \gate.kr(1));
    snd = snd * -4.dbamp;
    snd = snd ! 2;
    Out.ar(\out.kr(0), snd);
}).add;"
,"SynthDef(\softPluck, {
    var snd, shift;
    shift = 2;
    snd = Pulse.ar((\freq.kr(100) * XLine.ar(1.3, 1, 0.01)) + shift);
    snd = FreqShift.ar(snd, shift * -2);
    snd = snd * Env.adsr(0.001, 0.4, 0, 0.03, curve: -7).ar(Done.freeSelf, \gate.kr(1));
    snd = snd * -8.dbamp;
    snd = snd * \amp.kr(1);
    snd = snd ! 2;
    Out.ar(\out.kr(0), snd);
}).add;"
,"SynthDef(\sharpClap, {
    var snd;
    snd = Hasher.ar(Sweep.ar);
    snd = BPF.ar(snd, 1240, 0.3) * 12.dbamp;
    snd = snd * Env.perc(0.001, 0.2, curve: -4).ar(Done.freeSelf);
    snd = snd * -5.dbamp;
    snd = Pan2.ar(snd, \pan.kr(0));
    Out.ar(\out.kr(0), snd);
}).add;"
,"SynthDef(\looseKick, {
    var snd;
    snd = LFPulse.ar(30 * (1 + (8 * Env.perc(0.0, 0.1, curve: -3).ar))) - (1 / 2);
    snd = snd * Env.linen(0.0, \duration.kr(0.08), 0.0).ar(Done.freeSelf);
    snd = snd * \amp.kr(-10.dbamp);
    snd = Pan2.ar(snd, \pan.kr(0));
    OffsetOut.ar(\out.kr(0), snd);
}).add;"
,"SynthDef(\tightSnare, {
    var snd;
    snd = LFPulse.ar(210 * (1 + (3 * Env.perc(0.0, 0.08, curve: -2).ar))) - (1 / 2);
    snd = snd + (BPF.ar(Hasher.ar(Sweep.ar), 2210, 0.3) * Env.perc(0.001, 0.05).ar * 30.dbamp);
    snd = snd.sign;
    snd = snd * Env.linen(0.0, \duration.kr(0.07), 0.0).ar(Done.freeSelf);
    snd = snd * \amp.kr(-10.dbamp);
    snd = Pan2.ar(snd, \pan.kr(0));
    OffsetOut.ar(\out.kr(0), snd);
}).add;"
,"SynthDef(\hiHat, {
    var snd;
    snd = BPF.ar(Hasher.ar(Sweep.ar), 8210, 0.3);
    snd = snd.sign;
    snd = snd * Env.linen(0.0, 0.02, 0.0).ar(Done.freeSelf);
    snd = snd * \amp.kr(-10.dbamp);
    snd = Pan2.ar(snd, \pan.kr(0));
    OffsetOut.ar(\out.kr(0), snd);
}).add;"
,"SynthDef(\deepBass, {
    var snd;
    snd = Pulse.ar(\freq.kr(90) * XLine.ar(1.3, 1, 0.01));
    snd = MoogFF.ar(snd, XLine.kr([1000, 1200], [50, 8310], \duration.kr * 1.3) * \cutoff.kr.linexp(-1, 1, 0.5, 2), 0.1) * [0, -16].dbamp;
    snd = snd * Env.adsr(0.001, 0.4, 0, 0.03, curve: -7).ar(Done.freeSelf, \gate.kr(1));
    snd = snd * -8.dbamp;
    snd = snd * \amp.kr(1);
    snd = snd ! 2;
    Out.ar(\out.kr(0), snd);
}).add;"
,"SynthDef(\resonantKick, {
    var snd;
    snd = SinOsc.ar(60 * (1 + (5 * Env.perc(0, 0.1, curve: -8).ar)) * (1 + (0.4 * Env.perc(0, 0.5, curve: -2).ar)));
    snd = snd * Env.adsr(0.001, 0.5, 0, 0.01, curve: -7).ar(Done.freeSelf, \gate.kr(1));
    snd = snd * -4.dbamp;
    snd = snd ! 2;
    Out.ar(\out.kr(0), snd);
}).add;"
,"SynthDef(\woodBlock, {
    var snd;
    snd = SinOsc.ar(800, 0, 0.3);
    snd = snd * Env.perc(0.01, 0.2).ar(Done.freeSelf);
    Out.ar(\out.kr(0), snd ! 2);
}).add;"
,"SynthDef(\tom, {
    var snd;
    snd = SinOsc.ar(200, 0, 0.3);
    snd = snd * Env.perc(0.01, 0.5).ar(Done.freeSelf);
    Out.ar(\out.kr(0), snd ! 2);
}).add;"
,"SynthDef(\crashCymbal, {
    var snd;
    snd = WhiteNoise.ar(0.3);
    snd = HPF.ar(snd, 8000);
    snd = snd * Env.perc(0.01, 1.5).ar(Done.freeSelf);
    Out.ar(\out.kr(0), snd ! 2);
}).add;"
,"SynthDef(\triangle, {
    var snd;
    snd = SinOsc.ar(6000, 0, 0.3);
    snd = snd * Env.perc(0.01, 1).ar(Done.freeSelf);
    Out.ar(\out.kr(0), snd ! 2);
}).add;"
,"SynthDef(\shaker, {
    var snd;
    snd = WhiteNoise.ar(0.3);
    snd = LPF.ar(snd, 5000);
    snd = snd * Env.perc(0.01, 0.1).ar(Done.freeSelf);
    Out.ar(\out.kr(0), snd ! 2);
}).add;"
,"SynthDef(\claves, {
    var snd;
    snd = SinOsc.ar(2000, 0, 0.3);
    snd = snd * Env.perc(0.01, 0.2).ar(Done.freeSelf);
    Out.ar(\out.kr(0), snd ! 2);
}).add;"
,"SynthDef(\cabasa, {
    var snd;
    snd = WhiteNoise.ar(0.3);
    snd = LPF.ar(snd, 8000);
    snd = snd * Env.perc(0.01, 0.1).ar(Done.freeSelf);
    Out.ar(\out.kr(0), snd ! 2);
}).add;"
,"SynthDef(\guiro, {
    var snd;
    snd = WhiteNoise.ar(0.3);
    snd = HPF.ar(snd, 3000);
    snd = snd * Env.perc(0.01, 0.5).ar(Done.freeSelf);
    Out.ar(\out.kr(0), snd ! 2);
}).add;"
,"SynthDef(\vibraslap, {
    var snd;
    snd = WhiteNoise.ar(0.3);
    snd = HPF.ar(snd, 3000);
    snd = snd * Env.perc(0.01, 1).ar(Done.freeSelf);
    Out.ar(\out.kr(0), snd ! 2);
}).add;"
,"SynthDef(\congo1, {
    var snd;
    snd = SinOsc.ar(200, 0, 0.3);
    snd = snd * Env.perc(0.01, 0.5).ar(Done.freeSelf);
    Out.ar(\out.kr(0), snd ! 2);
}).add;"