{"prompt":"drum, standard, kick, electronic, punchy, dubstep, house\n\n###\n\n","completion":" SynthDef(\\kick, {\n        var snd;\n        snd = SinOsc.ar(45 * (1 + (5 * Env.perc(0, 0.1, curve: -8).ar)) * (1 + (0.4 * Env.perc(0, 0.5, curve: -2).ar)));\n        snd = snd + (BPF.ar(Hasher.ar(Sweep.ar), 6130, 0.3) * Env.perc(0.001, 0.02).ar * -12.dbamp);\n        snd = snd * (1 + Env.perc(0.0, 0.5).ar);\n        snd = snd.tanh;\n        snd = snd * Env.adsr(0.001, 0.5, 0, 0.01, curve: -7).ar(Done.freeSelf, \\gate.kr(1));\n        snd = snd * -4.dbamp;\n        snd = snd ! 2;\n        Out.ar(\\out.kr(0), snd);\n}).add; END"}
{"prompt":"synth, pluck, flange, electronic\n\n###\n\n","completion":" SynthDef(\\pluck, {\n        var snd, shift;\n        shift = 2;\n        snd = Pulse.ar((\\freq.kr(90) * XLine.ar(1.3, 1, 0.01)) + shift);\n        snd = FreqShift.ar(snd, shift * -2);\n        snd = (RLPF.ar(snd, XLine.kr([1000, 1200], [50, 8310], \\duration.kr * 1.3) * \\cutoff.kr.linexp(-1, 1, 0.5, 2), 0.1) * [0, -16].dbamp).sum;\n        snd = snd + (Latch.ar(snd, Impulse.ar(\\sampleRate.kr.linexp(-1, 1, 1000, 16e3))) * -5.dbamp);\n        snd = snd * Env.adsr(0.001, 0.4, 0, 0.03, curve: -7).ar(Done.freeSelf, \\gate.kr(1));\n        snd = snd * -8.dbamp;\n        snd = snd * \\amp.kr(1);\n        snd = snd ! 2;\n        Out.ar(\\out.kr(0), snd);\n}).add; END"}
{"prompt":"drum, clap, standard, house, regular\n\n###\n\n","completion":" SynthDef(\\clap, {\r\n\tvar snd, env;\r\n\tenv = Env([0, 1, 0.3, 1, 0.3, 1, 0], [0.001, 0.01, 0.001, 0.015, 0.001, 0.1], -4).ar(Done.freeSelf);\r\n\tsnd = Hasher.ar(Sweep.ar);\r\n\tsnd = BPF.ar(snd, 1240, 0.3) * 12.dbamp;\r\n\tsnd = snd * env;\r\n\tsnd = snd * -5.dbamp;\r\n\tsnd = Pan2.ar(snd, \\pan.kr(0));\r\n\tOut.ar(\\out.kr(0), snd);\r\n}).add; END"}
{"prompt":"drum, kick, distorted, chiptune, bitcrushed, distorted, hard\n\n###\n\n","completion":" SynthDef(\\kick, {\n        var snd;\n        snd = (LFPulse.ar(30 * (1 + (8 * Env.perc(0.0, 0.1, curve: -3).ar))) - (1 \/ 2)).sign;\n        snd = snd * Env.linen(0.0, \\duration.kr(0.08), 0.0).ar(Done.freeSelf);\n        snd = snd * \\amp.kr(-10.dbamp);\n        snd = Pan2.ar(snd, \\pan.kr(0));\n        OffsetOut.ar(\\out.kr(0), snd);\n}).add; END"}
{"prompt":"drum, snare, loud, chiptune, tonal, laser, space, fast \n\n###\n\n","completion":" SynthDef(\\snare, {\r\n\tvar snd;\r\n\tsnd = LFPulse.ar(210 * (1 + (3 * Env.perc(0.0, 0.08, curve: -2).ar))) - (1 \/ 2);\r\n\tsnd = snd + (BPF.ar(Hasher.ar(Sweep.ar), 2210, 0.3) * Env.perc(0.001, 0.05).ar * 30.dbamp);\r\n\tsnd = snd.sign;\r\n\tsnd = snd * Env.linen(0.0, \\duration.kr(0.07), 0.0).ar(Done.freeSelf);\r\n\tsnd = snd * \\amp.kr(-10.dbamp);\r\n\tsnd = Pan2.ar(snd, \\pan.kr(0));\r\n\tOffsetOut.ar(\\out.kr(0), snd);\r\n}).add; END"}
{"prompt":"drum, hat, closed, chiptune, white noise, noisy, noise, fuzzy, fuzz, short\n\n###\n\n","completion":" SynthDef(\\hat, {\r\n\tvar snd;\r\n\tsnd = BPF.ar(Hasher.ar(Sweep.ar), 8210, 0.3);\r\n\tsnd = snd.sign;\r\n\tsnd = snd * Env.linen(0.0, 0.02, 0.0).ar(Done.freeSelf);\r\n\tsnd = snd * \\amp.kr(-10.dbamp);\r\n\tsnd = Pan2.ar(snd, \\pan.kr(0));\r\n\tOffsetOut.ar(\\out.kr(0), snd);\r\n}).add; END"}
{"prompt":"synth, chiptune, alert, alternating, sin, sinwave, sine, sinewav, saw, sawwave, 2-note, 2-notes, alarm\n\n###\n\n","completion":" SynthDef(\\chip, {\r\n\tvar snd;\r\n\tsnd = (LFPulse.ar(\\freq.kr(440) * (2 ** LFPulse.ar(\\octaveFreq.kr(3), 0.5))) - (1 \/ 2)).sign;\r\n\tsnd = snd * Env.asr(0.0, 1, 0.0).ar(Done.freeSelf, \\gate.kr(1));\r\n\tsnd = snd * \\amp.kr(-10.dbamp);\r\n\tsnd = Pan2.ar(snd, \\pan.kr(0));\r\n\tOffsetOut.ar(\\out.kr(0), snd);\r\n}).add; END"}
{"prompt":"vocal, bright, vibrant, synth, vox\n\n###\n\n","completion":" SynthDef(\\vocal, {\r\n\tvar snd, formantFreq, freq;\r\n\tformantFreq = \\formantFreq.kr(200) * XLine.kr(3, 1, 0.5);\r\n\tfreq = \\freq.kr(440);\r\n\tsnd = (LFSaw.ar(freq).linlin(-1, 1, 0, 1) * (formantFreq \/ freq)) % 1;\r\n\tsnd = ((snd > 0.5) * 2) - 1;\r\n\tsnd = snd.sign;\r\n\tsnd = snd * Env.asr(0.0, 1, 0.0).ar(Done.freeSelf, \\gate.kr(1));\r\n\tsnd = snd * \\amp.kr(-10.dbamp);\r\n\tsnd = Pan2.ar(snd, \\pan.kr(0));\r\n\tOffsetOut.ar(\\out.kr(0), snd);\r\n}).add; END"}
{"prompt":"synth, fx, effect, effects\n\n###\n\n","completion":" SynthDef(\\fx, {\r\n\tvar snd;\r\n\tsnd = In.ar(\\out.kr(0), 2);\r\n\tsnd = snd.sign * -5.dbamp;\r\n\tReplaceOut.ar(\\out.kr(0), snd);\r\n}).add; END"}
{"prompt":"drum, kick, hard, house, punchy, boxy, box, bright\n\n###\n\n","completion":" SynthDef(\\kick, {\r\n\tvar snd, velocity;\r\n\tvelocity = \\velocity.kr(1).clip(0, 1);\r\n\tsnd = SinOsc.ar(\r\n\t\t69\r\n\t\t* (1 + (3 * Env.perc(0.0, 0.3, curve: -9).ar * velocity))\r\n\t\t* (1 + (8 * Env.perc(0.0, 0.01, curve: -4).ar * velocity))\r\n\t\t* [1, 2.3, 1.4]\r\n\t);\r\n\tsnd = snd * (Env.perc(0, [3.0, 0.5, 0.1]).ar);\r\n\tsnd = (snd * [0, -10, -15].dbamp).sum;\r\n\tsnd = snd + (BPF.ar(Hasher.ar(Sweep.ar), 12420, 0.3) * Env.perc(0.001, 0.015).ar * 5.dbamp);\r\n\tsnd = (snd * 6.dbamp).tanh;\r\n\tsnd = snd * Env.perc(0.0005, 0.8 * velocity.sqrt).ar(Done.freeSelf);\r\n\tsnd = (snd * 5.dbamp * velocity).clip2;\r\n\tsnd = snd * -6.dbamp;\r\n\tsnd = Pan2.ar(snd, \\pan.kr(0));\r\n\tOut.ar(\\out.kr(0), snd);\r\n}).add; END"}
{"prompt":"drum, snare, dubstep, loud, hard, tonal\n\n###\n\n","completion":" SynthDef(\\snare, {\r\n\tvar snd;\r\n\tsnd = SinOsc.ar(\r\n\t\t319\r\n\t\t* (1 + (0.5 * Env.perc(0.0, 0.1, curve: -9).ar))\r\n\t\t* (1 + (0.3 * Env.perc(0.0, 0.03, curve: -4).ar))\r\n\t\t* [0.56, 1, 2.3, 3.4]\r\n\t);\r\n\tsnd = snd * (Env.perc(0, [0.3, 3.0, 0.2, 0.1]).ar);\r\n\tsnd = (snd * [-5, 0, -5, -3].dbamp).sum;\r\n\tsnd = snd + (BPF.ar(Hasher.ar(Sweep.ar), [2420, 5420, 8329], 0.5) * Env.perc(0.05, 0.2).ar * [5, 0, -8].dbamp).sum;\r\n\tsnd = (snd * 8.dbamp).tanh;\r\n\tsnd = snd * Env.perc(0.0005, 0.12, curve: -1).ar(Done.freeSelf);\r\n\tsnd = snd * -3.dbamp;\r\n\tsnd = Pan2.ar(snd, \\pan.kr(0));\r\n\tOut.ar(\\out.kr(0), snd);\r\n}).add; END"}
{"prompt":"synth, resonant, sustain, sustained, tonal, high bass, low synth, melodic\n\n###\n\n","completion":" SynthDef(\\bass, {\r\n\tvar snd, freq, duration;\r\n\tduration = \\duration.kr;\r\n\tfreq = \\freq.kr(440) * XLine.kr(1, \\bend.kr.midiratio, duration) * [-0.1, 0.1].midiratio;\r\n\tsnd = Pulse.ar(freq);\r\n\tsnd = MoogFF.ar(snd, XLine.kr(ExpRand(500, 3000), ExpRand(500, 3000), duration), 3) * 20.dbamp;\r\n\tsnd = snd.fold2;\r\n\tsnd = MoogFF.ar(snd, XLine.kr(ExpRand(500, 3000), ExpRand(500, 3000), duration), 2) * 5.dbamp;\r\n\tsnd = snd.tanh * 8.dbamp;\r\n\tsnd = Splay.ar(snd, 0.3);\r\n\tsnd = snd + (Latch.ar(snd, Impulse.ar(XLine.kr(ExpRand(3000, 16e3), ExpRand(3000, 16e3)), duration)) * -5.dbamp);\r\n\tsnd = (SinOsc.ar(freq * [1, 1 \/ 2]) * [0, -10].dbamp).sum + HPF.ar(snd, 300);\r\n\tsnd = BHiShelf.ar(snd, 1200, 1, -10);\r\n\tsnd = Limiter.ar(snd * 20.dbamp);\r\n\tsnd = snd * Env.adsr(0.03, 0.1, 0.5, 0.01, curve: -1).ar(Done.freeSelf, \\gate.kr(1));\r\n\tsnd = snd * -3.dbamp;\r\n\tOut.ar(\\out.kr(0), snd);\r\n}).add; END"}
{"prompt":"synth, sustain, sustained, bell, gong, radio static, tonal, humming, hum\n\n###\n\n","completion":" SynthDef(\\glitch, {\r\n\tvar snd, duration;\r\n\tduration = \\duration.kr(1);\r\n\tsnd = SinOsc.ar(ExpRand(100, 8000)) * Rand(1000, 3e3);\r\n\t5.do {\r\n\t\tsnd = SinOsc.ar(ExpRand(100, 8000) + snd) * Rand(2e3, 8e3) * Line.kr(Rand(0.4, 1), Rand(0.4, 1), duration);\r\n\t\tsnd = Latch.ar(snd, Impulse.ar(ExpRand(8000, 16e3)));\r\n\t\tsnd = BPF.ar(snd, ExpRand(100, 8000), ExpRand(0.5, 0.9));\r\n\t};\r\n\tsnd = SinOsc.ar(ExpRand(100, 3000) + snd);\r\n\tsnd = snd * Line.kr(Rand(0, 1), Rand(0, 1), duration);\r\n\tsnd = MoogFF.ar(snd, 4000, 0);\r\n\tsnd = snd * Env.asr(0, 1, 0).ar(Done.freeSelf, \\gate.kr(1));\r\n\tsnd = snd * -5.dbamp;\r\n\tsnd = Pan2.ar(snd, \\pan.kr(0));\r\n\tOut.ar(\\out.kr(0), snd);\r\n}).add; END"}
{"prompt":"synth, fx, effect, effects\n\n###\n\n","completion":" SynthDef(\\fx, {\r\n\tvar snd, trigger, dry, probability;\r\n\tsnd = In.ar(\\out.kr(0), 2);\r\n\tdry = snd;\r\n\ttrigger = \\trigger.tr;\r\n\tprobability = \\probability.kr(0.2);\r\n\t4.do {\r\n\t\tsnd = SelectX.ar(Latch.kr(CoinGate.kr(probability, trigger), trigger).lag(0.01), [\r\n\t\t\tsnd,\r\n\t\t\tsnd + (LPF.ar(GVerb.ar(snd.sum, Rand(30, 50), Rand(1, 3)), 3000) * -10.dbamp)\r\n\t\t]);\r\n\t\tsnd = SelectX.ar(Latch.kr(CoinGate.kr(probability, trigger), trigger).lag(0.01), [\r\n\t\t\tsnd,\r\n\t\t\tsnd + PitchShift.ar(snd, Rand(0.02, 0.05), 1 + Amplitude.ar(snd, 0.01, 0.1))\r\n\t\t]);\r\n\t\tsnd = SelectX.ar(Latch.kr(CoinGate.kr(probability, trigger), trigger).lag(0.01), [\r\n\t\t\tsnd,\r\n\t\t\tsnd + DelayC.ar(snd, 0.2, SinOsc.ar(Rand(0.1, 0.3), [0, pi]).linlin(-1, 1, 0, 1) * 1e-3)\r\n\t\t]);\r\n\t\tsnd = SelectX.ar(Latch.kr(CoinGate.kr(probability, trigger), trigger).lag(0.01), [\r\n\t\t\tsnd,\r\n\t\t\tFreqShift.ar(snd, Rand(-30, 30))\r\n\t\t]);\r\n\t\tsnd = SelectX.ar(Latch.kr(CoinGate.kr(probability, trigger), trigger).lag(0.01), [\r\n\t\t\tsnd,\r\n\t\t\tBPF.ar(snd, LFNoise2.kr(3).linexp(-1, 1, 100, 8000), 0.5)\r\n\t\t]);\r\n\t};\r\n\tsnd = (dry * 3.dbamp) + (snd * (1 - (0.5 * Amplitude.ar(dry, 0.01, 0.1))).clip(0, 1));\r\n\tsnd = HPF.ar(snd, 20);\r\n\tsnd = Limiter.ar(snd);\r\n\tReplaceOut.ar(\\out.kr(0), snd);\r\n}).add; END"}
{"prompt":"drum, kick, hard, transient, punchy\n\n###\n\n","completion":" SynthDef(\\kick, {\r\n\tvar snd;\r\n\tsnd = SinOsc.ar(59 * (1 + (5 * Env.perc(0, 0.1, curve: -8).ar)) * (1 + (0.4 * Env.perc(0, 0.2, curve: -2).ar)));\r\n\tsnd = snd + (SinOsc.ar(XLine.ar(7000, 100, 0.03)) * Env.perc(0.002, 0.03).ar);\r\n\tsnd = snd + (BPF.ar(Hasher.ar(Sweep.ar), 8130, 0.5) * Env.perc(0.001, 0.03).ar * -9.dbamp);\r\n\tsnd = snd * (1 + Env.perc(0.0, 0.5).ar);\r\n\tsnd = snd.tanh;\r\n\tsnd = snd * Env.perc(0.001, 0.5, curve: -4).ar(Done.freeSelf);\r\n\tsnd = snd * -4.dbamp;\r\n\tsnd = snd ! 2;\r\n\tOut.ar(\\out.kr(0), snd);\r\n}).add; END"}
{"prompt":"drum, kick, ghostkick, ghost kick, fast, quick, short\n\n###\n\n","completion":" SynthDef(\\ghostKick, {\r\n\tvar snd;\r\n\tsnd = SinOsc.ar(49 * (1 + (5 * Env.perc(0, 0.1, curve: -8).ar)) * (1 + (0.4 * Env.perc(0, 0.2, curve: -2).ar)));\r\n\tsnd = snd + (SinOsc.ar(XLine.ar(4000, 100, 0.03)) * Env.perc(0.002, 0.03).ar);\r\n\tsnd = snd + (BPF.ar(Hasher.ar(Sweep.ar), 8130, 0.5) * Env.perc(0.001, 0.03).ar * -9.dbamp);\r\n\tsnd = snd * (1 + Env.perc(0.0, 0.5).ar);\r\n\tsnd = snd.tanh;\r\n\tsnd = snd * Env.perc(0.001, 0.1, curve: -4).ar(Done.freeSelf);\r\n\tsnd = snd * -4.dbamp;\r\n\tsnd = snd ! 2;\r\n\tOut.ar(\\out.kr(0), snd);\r\n}).add; END"}
{"prompt":"drum, clap, dry clap, dry, house, classic house, classic, standard, regular\n\n###\n\n","completion":" SynthDef(\\clapDry, {\r\n\tvar snd;\r\n\tsnd = Hasher.ar(Sweep.ar + [0, 1, 2]);\r\n\tsnd = BPF.ar(snd, 1135 * [0.9, 1.0, 1.16], 0.1) * 13.dbamp;\r\n\tsnd = snd * Env.perc(0.001, 0.2, curve: -6).delay([0, 1, 2] * 2e-2).ar;\r\n\tsnd = Splay.ar(snd, 0.5);\r\n\tsnd = snd * 8.dbamp;\r\n\tsnd = snd * \\amp.kr(1);\r\n\tsnd = snd * Env.linen(0, 0.3, 0.1).ar(Done.freeSelf);\r\n\tOut.ar(\\out.kr(0), snd);\r\n}).add; END"}
{"prompt":"drum, clap, long, long tail, tail, release, long release, wet, reverb, echo\n\n###\n\n","completion":" SynthDef(\\clapWet, {\r\n\tvar snd;\r\n\tsnd = Hasher.ar(Sweep.ar + [0, 1, 2]);\r\n\tsnd = BPF.ar(snd, 1105 * [0.9, 1.0, 1.16], 0.1) * 13.dbamp;\r\n\tsnd = snd * Env.perc(0.001, \\decay.kr(0.9), curve: -6).delay([0, 1, 2] * 2e-2).ar;\r\n\tsnd = Splay.ar(snd, 0.3);\r\n\tsnd = snd * -3.dbamp;\r\n\tsnd = snd * Env.linen(0, \\decay.kr(0.9), 0.1).ar(Done.freeSelf);\r\n\tOut.ar(\\out.kr(0), snd);\r\n}).add; END"}
{"prompt":"drum, hat, closed, chiptune, white noise, noisy, noise short, very short, small, clicky, click, tick\n\n###\n\n","completion":" SynthDef(\\hat, {\r\n\tvar snd;\r\n\tsnd = SinOsc.ar(1320) * Env.perc(0.001, 0.03).ar * 8000;\r\n\tsnd = SinOsc.ar(3340 + snd) * Env.perc(0.001, 0.1).ar * 16000;\r\n\tsnd = SinOsc.ar(1220 + snd);\r\n\tsnd = snd + Hasher.ar(Sweep.ar);\r\n\tsnd = BPF.ar(snd, [3844, 12844, 5249], 0.3);\r\n\tsnd = snd * [-10, -5, 0].dbamp;\r\n\tsnd = snd.sum;\r\n\tsnd = snd * Env.perc(0.003, 0.05, curve: -8).ar(Done.freeSelf);\r\n\tsnd = Pan2.ar(snd, \\pan.kr(0));\r\n\tOut.ar(\\out.kr(0), snd);\r\n}).add; END"}
{"prompt":"synth, sustain, sustained, bass, wavering, upsweep, pitched up, pitched, hovering, floating\n\n###\n\n","completion":" SynthDef(\\bass, {\r\n\tvar snd;\r\n\tsnd = Pulse.ar(\\freq.kr(100) * XLine.kr(1, \\bend.kr(5).midiratio, 0.3) * [-0.1, 0, 0.1].midiratio);\r\n\tsnd = Splay.ar(snd);\r\n\tsnd = MoogFF.ar(snd, LFNoise2.kr(8).linexp(-1, 1, 500, 8000), 2.3) * 15.dbamp;\r\n\tsnd = snd.fold2;\r\n\tsnd = MoogFF.ar(snd, LFNoise2.kr(5).linexp(-1, 1, 500, 16000), 1.3) * 5.dbamp;\r\n\tsnd = snd + CombC.ar(snd, 0.1, 1 \/ 95, 0.1);\r\n\tsnd = snd * Env.asr(0.3, 1, 0.03).ar(Done.freeSelf, \\gate.kr(1));\r\n\tsnd = snd * \\amp.kr(1);\r\n\tsnd = snd * -12.dbamp;\r\n\tOut.ar(\\out.kr(0), snd);\r\n}).add; END"}
{"prompt":"synth, lfo, voluming changing, wavy, wavering, pitchup, pitched up, pitched, bass, tonal, hovering, hover\n\n###\n\n","completion":" SynthDef(\\bass2, {\r\n\tvar snd, auto, freq;\r\n\tfreq = \\freq.kr(100) * XLine.kr(1, \\bend.kr(5).midiratio, 1) * [-0.1, 0, 0.1].midiratio;\r\n\tauto = SinOsc.ar(1 \/ \\beat.kr(1), 1.5pi).linlin(-1, 1, 0, 1);\r\n\tsnd = Pulse.ar(freq);\r\n\tsnd = Splay.ar(snd);\r\n\tsnd = MoogFF.ar(snd, auto.linexp(0, 1, 600, 4000), 2.3) * 15.dbamp;\r\n\tsnd = snd.fold2;\r\n\tsnd = MoogFF.ar(snd, auto.linexp(0, 1, 500, 16000), 0.3) * 8.dbamp;\r\n\tsnd = snd * auto;\r\n\tsnd = snd + CombC.ar(snd, 0.1, 1 \/ \\combFreq.kr(125), \\combDecay.kr(0.1));\r\n\tsnd = snd * 3.dbamp;\r\n\tsnd = snd * Env.asr(0.3, 1, 0.03).ar(Done.freeSelf, \\gate.kr(1));\r\n\tsnd = snd * \\amp.kr(1);\r\n\tsnd = snd * -12.dbamp;\r\n\tOut.ar(\\out.kr(0), snd);\r\n}).add; END"}
{"prompt":"synth, pad, tonal, radio static, static, radio, sine, sin, sinewave, sinwave, beautiful, complex\n\n###\n\n","completion":" SynthDef(\\pad, {\r\n\tvar snd, env, pitchEnv;\r\n\tenv = Env.perc(0.03, 0.5).ar(Done.none, \\duck.tr);\r\n\tsnd = Saw.ar(\\freq.kr(440) * (LFNoise2.kr(3 ! 8) * 0.1).midiratio);\r\n\tsnd = Splay.ar(snd);\r\n\tsnd = MoogFF.ar(snd, LFNoise2.kr(3).linexp(-1, 1, 500, 1000) * (env.neg * 8).midiratio, 1.5) * 10.dbamp;\r\n\tsnd = Latch.ar(snd, Impulse.ar(LFNoise2.kr(3).linexp(-1, 1, 4e3, 16e3)));\r\n\tsnd = snd * (1 - env);\r\n\tsnd = snd * Env.asr(0.1, 1, 0.1).ar(Done.freeSelf, \\gate.kr(1));\r\n\tsnd = snd * \\amp.kr(1);\r\n\tsnd = snd * -12.dbamp;\r\n\tOut.ar(\\out.kr(0), snd);\r\n}).add; END"}
{"prompt":"synth, loud, vibrato, vibrating, tonal, waving, wave, wavy\n\n###\n\n","completion":" SynthDef(\\bass3, {\n        var snd, env, freq;\n        env = Env.perc(0.03, 0.6).ar(Done.none, \\duck.tr);\n        freq = \\freq.kr(440);\n        snd = Pulse.ar(freq * [-0.1, 0.1].midiratio, 0.5);\n        snd = MoogFF.ar(snd, 3000 * (LFNoise2.kr(1) * 10).midiratio, 1) * 10.dbamp;\n        snd = SinOsc.ar(freq) + HPF.ar(snd.tanh, 300);\n        snd = snd * (1 - env);\n        snd = snd * Env.asr(0.1, 1, 0.1).ar(Done.freeSelf, \\gate.kr(1));\n        snd = snd * \\amp.kr(1);\n        snd = snd * -15.dbamp;\n        Out.ar(\\out.kr(0), snd);\n}).add; END"}
{"prompt":"synth, bass, pluck, house, deep, techno, bass house, deep, cool, layered, layer, detuned, detune, hit\n\n###\n\n","completion":" SynthDef(\\pluck, {\n        var snd, freq;\n        freq = 60 * \\transpose.kr(0).midiratio;\n        snd = Pulse.ar(freq * [-0.1, 0.1].midiratio);\n        snd = MoogFF.ar(snd, Env.perc(0.001, 0.2).ar.linexp(0, 1, 100, 8000), 1);\n        snd = snd * (1 + (SinOsc.ar(963) * Env.perc(0, 0.1).ar));\n        snd = snd * Env.perc(0.001, 0.2, curve: -1).ar;\n        snd = snd + (GVerb.ar(snd.sum, 20, 1) * -10.dbamp);\n        snd = snd * Env.perc(0.001, 0.5, curve: -1).ar(Done.freeSelf);\n        snd = snd * \\amp.kr(1);\n        snd = snd * 3.dbamp;\n        Out.ar(\\out.kr(0), snd);\n}).add; END"}
{"prompt":"drum, kick, deep, house, dubstep, short, quick, subdued, dark, dull, small\n\n###\n\n","completion":" SynthDef(\\kick, {\r\n\tvar snd;\r\n\tsnd = SinOsc.ar(Env([2000, 400, 95, 60], [0.005, 0.01, 0.1], [\\exp, \\exp, \\exp]).ar);\r\n\tsnd = snd + (BPF.ar(Hasher.ar(Sweep.ar + [0, 1]), 4400, 0.3) * 10.dbamp * Env.perc(0, 0.01).ar);\r\n\tsnd = snd + (BPF.ar(Hasher.ar(Sweep.ar + [1, 0]), 2400, 0.3) * -5.dbamp * Env.perc(0, 0.05).ar);\r\n\tsnd = snd * Env.perc(0.006, 0.2).ar(Done.freeSelf);\r\n\tsnd = (snd * 3).tanh;\r\n\tsnd = snd * \\amp.kr(0.1);\r\n\tOut.ar(\\out.kr(0), snd);\r\n}).add; END"}
{"prompt":"drum, clap, house, classic, standard\n\n###\n\n","completion":" SynthDef(\\clap, {\r\n\tvar snd;\r\n\tsnd = BPF.ar(Hasher.ar(Sweep.ar), [1100, 1150, 1230] * 1.2, 0.5) * Env.perc(0.001, 0.15).delay([0, 0.013, 0.023]).ar * 12.dbamp;\r\n\tsnd = Splay.ar(snd, 0.7) * 5.dbamp;\r\n\tsnd = LPF.ar(Latch.ar(LPF.ar(snd, 8000), Impulse.ar(16e3)), 12000);\r\n\tsnd = snd * Env.perc(0.0, 0.2, curve: 1).ar(Done.freeSelf);\r\n\tsnd = snd * \\amp.kr(0.1);\r\n\tOut.ar(\\out.kr(0), snd);\r\n}).add; END"}
{"prompt":"drum, hat, open, medium-length, tail, open hi hat, hi-hat,high hat\n\n###\n\n","completion":" SynthDef(\\hat, {\n        var snd;\n        snd = (BPF.ar(Hasher.ar(Sweep.ar), [10e3, 8e3, 14e3], 0.2) * Env.perc([0.01, 0.03, 0.02], [0.2, 0.15, 0.32], curve: 1).ar);\n        snd = Splay.ar(snd, 0.5) * 7.dbamp;\n        snd = (snd + (snd.tanh * -5.dbamp)) * -5.dbamp;\n        snd = snd * Env.perc(0.0, \\decay.kr(0.19), curve: -6).ar(Done.freeSelf);\n        snd = snd * \\amp.kr(0.1);\n        snd = snd ! 2;\n        Out.ar(\\out.kr(0), snd);\n}).add; END"}
{"prompt":"synth, bass, short, error, moog, deep, korg, staccato\n\n###\n\n","completion":" SynthDef(\\bass, {\r\n\tvar snd, freq, brightness;\r\n\tfreq = \\freq.kr(60);\r\n\tsnd = (Pulse.ar(freq * (Env.perc(0.0, 0.03).ar * 24).midiratio * [1, 2]) * [0, -10].dbamp).sum;\r\n\tsnd = snd ! 2;\r\n\tbrightness = \\brightness.kr(0);\r\n\tsnd = MoogFF.ar(snd, brightness.linexp(0, 1, 200, 500), 3) * 20.dbamp;\r\n\tsnd = snd.fold2;\r\n\tsnd = MoogFF.ar(snd, brightness.linexp(0, 1, 2000, 900), 3) * 10.dbamp;\r\n\tsnd = snd.tanh;\r\n\tsnd = LPF.ar(snd, brightness.linexp(0, 1, 1000, 3000));\r\n\tsnd = HPF.ar(snd, 400);\r\n\tsnd = (snd * 3.dbamp) + SinOsc.ar(freq);\r\n\tsnd = snd * -5.dbamp;\r\n\tsnd = snd * Env.perc(0.001, 0.12, curve: 10).ar(Done.freeSelf);\r\n\tsnd = snd * \\amp.kr(0.1);\r\n\tOut.ar(\\out.kr(0), snd);\r\n}).add; END"}
{"prompt":"synth, bright, stab, pluck, vibrant, 90s, detuned, stereo, voice\n\n###\n\n","completion":" SynthDef(\\synth, {\r\n\tvar snd, freq;\r\n\tfreq = \\freq.kr(60);\r\n\tfreq = freq * [-0.1, 0.1].midiratio;\r\n\tsnd = Pluck.ar(PinkNoise.ar, Impulse.ar(0), 0.1, freq.reciprocal, 3.0, 0.2) * 22.dbamp;\r\n\tsnd = snd * Env.adsr(0.02, 0.3, 0.0, 0.05).ar(Done.freeSelf, \\gate.kr(1));\r\n\tsnd = snd * \\amp.kr(0.1);\r\n\tOut.ar(\\out.kr(0), snd);\r\n}).add; END"}
{"prompt":"synth, pad, moog, bass, drone, droning, sustained, sustain\n\n###\n\n","completion":" SynthDef(\\pad, {\r\n\tvar snd, freq;\r\n\tfreq = \\freq.kr(60);\r\n\tsnd = Saw.ar(freq);\r\n\tsnd = DelayN.ar(snd, 0.01, { Rand(0, 0.005) } ! 4);\r\n\tsnd = RLPF.ar(snd, LFNoise2.kr(1 ! 4).exprange(500, 1200), 0.1);\r\n\tsnd = Splay.ar(snd);\r\n\tsnd = LPF.ar(snd, 3000);\r\n\tsnd = snd * Env.asr(0.3, 1, 1).ar(Done.freeSelf, \\gate.kr(1));\r\n\tsnd = snd * 6.dbamp;\r\n\tsnd = snd * \\amp.kr(0.1);\r\n\tOut.ar(\\out.kr(0), snd);\r\n}).add; END"}
{"prompt":"drum, kick, bassdrum, bass drum, small, soft, dull, lower volume, low, fast, quick\n\n###\n\n","completion":" SynthDef(\\kick, {\r\n\tvar snd;\r\n\tsnd = SinOsc.ar(\\freq.kr.linexp(0, 1, 45, 65) * (1 + (3 * Env.perc(0.001, \\bend.kr.linexp(0, 1, 0.03, 0.2), curve: -8).ar)));\r\n\tsnd = snd * (1 + (5 * Env.perc(0, 0.01).ar));\r\n\tsnd = snd + (BPF.ar(Hasher.ar(Sweep.ar), 8320, 0.3) * Env.perc(0.001, 0.01).ar * -5.dbamp);\r\n\tsnd = snd * \\drive.kr.linexp(0, 1, 0.5, 3);\r\n\tsnd = snd.tanh;\r\n\tsnd = snd * -10.dbamp;\r\n\tsnd = snd * \\velocity.kr(1);\r\n\tsnd = snd * (1 + Env.perc(0, 0.02).ar);\r\n\tsnd = snd * Env.perc(0.001, \\decay.kr.linexp(0, 1, 0.1, 0.7)).ar(Done.freeSelf);\r\n\tsnd = Pan2.ar(snd, \\pan.kr(0));\r\n\tsnd = snd * \\amp.kr(1);\r\n\tOut.ar(\\out.kr(0), snd);\r\n}).add; END"}
{"prompt":"drum, snare, soft, classic, drum machine, machine, 909\n\n###\n\n","completion":" SynthDef(\\snare, {\r\n\tvar snd;\r\n\tsnd = SinOsc.ar(\\freq.kr.linexp(0, 1, 200, 260) * (1 + (0.3 * Env.perc(0.001, 0.01, curve: -8).ar)) * [1, 2.3, 5.6, 8.9]);\r\n\tsnd = snd * ([1] ++ Env.perc(0, [0.1, 0.03, 0.15] * \\clankiness.kr.linexp(0, 1, 1, 3)).ar);\r\n\tsnd = snd * [0, -8, -5, -15].dbamp * ([1] ++ (\\clankiness.kr.linlin(0, 1, 0.1, 1) ! 3));\r\n\tsnd = snd.sum;\r\n\tsnd = snd * \\velocity.kr(1);\r\n\tsnd = snd + (BPF.ar(Hasher.ar(Sweep.ar), \\brushFreq.kr.linexp(0, 1, 1200, 3200), 0.3) * Env.perc(0.05, 0.1).ar * -1.dbamp * \\drive.kr.linlin(0, 1, -3, 5).dbamp);\r\n\tsnd = snd * (1 + (10 * Env.perc(0, 0.01).ar * \\transient.kr.sqrt));\r\n\tsnd = (snd * \\drive.kr.linlin(0, 1, -2, 5).dbamp).tanh;\r\n\tsnd = snd * -3.dbamp * \\isGhost.kr.linlin(0, 1, 0, -7).dbamp;\r\n\tsnd = snd * Env.perc(0.001, \\decay.kr.linexp(0, 1, 0.09, 0.15) * \\isGhost.kr.linexp(0, 1, 1, 0.2), curve: -1).ar(Done.freeSelf);\r\n\tsnd = Pan2.ar(snd, \\pan.kr(0));\r\n\tsnd = snd * \\amp.kr(1);\r\n\tOut.ar(\\out.kr(0), snd);\r\n}).add; END"}
{"prompt":"drum, hat, hihat, hi-hat, high hat, closed, close, small, click, flick\n\n###\n\n","completion":" SynthDef(\\hat, {\r\n\tvar snd;\r\n\tsnd = SinOsc.ar([1324, 2359, 4530, 4539] * 3) * [3425, 2485, 3492, 4728] * Env.perc(0.002, 0.01).ar;\r\n\tsnd = SinOsc.ar(([5848, 4378, 4378, 2783] * 1) + snd);\r\n\tsnd = snd.sum.fold2;\r\n\tsnd = snd + (Hasher.ar(Sweep.ar));\r\n\tsnd = snd.tanh;\r\n\tsnd = RHPF.ar(snd, 3210 * \\freq.kr.linexp(0, 1, 0.5, 2), 0.3);\r\n\tsnd = BRF.ar(snd, 4329, 0.3);\r\n\tsnd = snd * \\velocity.kr(1);\r\n\tsnd = snd * -16.dbamp;\r\n\tsnd = snd * (1 + (3 * Env.perc(0, 0.01).ar)) \/ 3;\r\n\tsnd = snd * Env.perc(\\attack.kr.linexp(0, 1, 0.001, 0.01), \\decay.kr.linexp(0, 1, 0.01, 0.05), curve: -1).ar(Done.freeSelf);\r\n\tsnd = Pan2.ar(snd, \\pan.kr(0));\r\n\tsnd = snd * \\amp.kr(1);\r\n\tOut.ar(\\out.kr(0), snd);\r\n}).add; END"}
{"prompt":"synth, bass, sustained, sustain, moog, reese, low, dark\n\n###\n\n","completion":" SynthDef(\\bass, {\n        var snd, freq, dry;\n        freq = \\freq.kr(60);\n        snd = SinOsc.ar(freq * XLine.kr(2, 1, 0.03));\n        dry = snd;\n        snd = DelayC.ar(HPF.ar((snd * 12.dbamp).tanh, 900), 0.2, SinOsc.ar(3, [0, pi]).linlin(-1, 1, 0, 1) * 0.5e-3);\n        snd = dry + (snd * -1.dbamp);\n        snd = snd * Env.adsr(0.001, 0.1, 0.9, 0.02).ar(Done.freeSelf, \\gate.kr(1));\n        snd = snd * -8.dbamp;\n        snd = snd * \\amp.kr(1);\n        Out.ar(\\out.kr(0), snd);\n}).add; END"}
{"prompt":"synth, bass, sustained, sustain, swell, acid, loud, bright\n\n###\n\n","completion":" SynthDef(\\bass2, {\r\n\tvar snd, freq, dry;\r\n\tfreq = \\freq.kr(60);\r\n\tsnd = Pulse.ar(freq);\r\n\tsnd = MoogFF.ar(snd, (Line.kr(0, 1, 0.9) ** 0.6).linexp(0, 1, 200, 4200), 0.9) * 5.dbamp;\r\n\tsnd = Pan2.ar(snd, \\pan.kr(0));\r\n\tsnd = snd * Env.asr(0.1, 1, 0.03).ar(Done.freeSelf, \\gate.kr(1));\r\n\tsnd = snd * -8.dbamp;\r\n\tsnd = snd * \\amp.kr(1);\r\n\tOut.ar(\\out.kr(0), snd);\r\n}).add; END"}
{"prompt":"drum, kick, bassdrum, bass drum, chiptune, fast, sharp\n\n###\n\n","completion":" SynthDef(\\kick, {\r\n\tvar snd;\r\n\tsnd = SinOsc.ar(50 * (1 + (6 * Env.perc(0.001, 0.1, curve: -6).ar)) * (1 + Env.perc(0, 0.5).ar));\r\n\tsnd = snd + (BPF.ar(Hasher.ar(Sweep.ar), 6230, 0.2) * Env.perc(0.01, 0.02).ar *  -10.dbamp);\r\n\tsnd = snd + (2.dbamp * SinOsc.ar(XLine.ar(3000, 100, 0.01)) * Env.perc(0, 0.01).ar);\r\n\tsnd = snd * (1 + (\\drive.kr(0) * Env.perc(0, 0.3).ar));\r\n\tsnd = (snd * (\\drive.kr(0) * 20).dbamp).tanh;\r\n\tsnd = snd * Env.perc(0.001, 0.3 * (1 + \\drive.kr(0))).ar(Done.freeSelf);\r\n\tsnd = snd * 10.dbamp;\r\n\tsnd = Pan2.ar(snd, \\pan.kr(0));\r\n\tOut.ar(\\out.kr(0), snd);\r\n}).add; END"}
{"prompt":"synth, pad, sustained, sustain, eerie, weird, hoover, floating, bright\n\n###\n\n","completion":" SynthDef(\\pad, {\r\n\tvar snd;\r\n\tsnd = LFTri.ar(\\freq.kr(440) * ({ LFNoise2.kr(3) * 0.2 } ! 5).midiratio);\r\n\tsnd = Splay.ar(snd);\r\n\tsnd = (snd * -20.dbamp) + BPF.ar([snd], { ExpRand(800, 8120) } ! 3, 0.1).sum;\r\n\tsnd = (snd * 16).round \/ 16;\r\n\tsnd = snd * Env.asr(0.2, 1, 0.03, curve: 4).ar(Done.freeSelf, \\gate.kr(1));\r\n\tsnd = snd * -18.dbamp;\r\n\tOut.ar(\\out.kr(0), snd);\r\n}).add; END"}
{"prompt":"synth, bass, sustained, sustain, alternating, random, noise, slow, massive, synthesis, saw, wave, sawwave, tonal\n\n###\n\n","completion":" SynthDef(\\lead, {\r\n\tvar snd, scale, trigger;\r\n\ttrigger = Dust.ar(0.3);\r\n\tsnd = LFSaw.ar(\\freq.kr(440));\r\n\tsnd = RLPF.ar(snd, TExpRand.ar(100, 8000, trigger).lag(0.01), 0.3).clip2;\r\n\tscale = 2 ** 8;\r\n\tsnd = snd * scale;\r\n\tsnd = snd bitAnd: TRand.ar(0, scale, trigger);\r\n\tsnd = snd bitXor: TRand.ar(0, scale, trigger);\r\n\tsnd = snd.linlin(0, scale, -1, 1);\r\n\tsnd = snd * Env.asr(0.01, 1, 0.03, curve: 4).ar(Done.freeSelf, \\gate.kr(1));\r\n\tsnd = snd * -18.dbamp;\r\n\tsnd = Pan2.ar(snd, TRand.ar(-0.5, 0.5, trigger));\r\n\tOut.ar(\\out.kr(0), snd);\r\n}).add; END"}
{"prompt":"synth, pad, phased, phase, flanger, flange, moving, sustain, sustained, varied, different\n\n###\n\n","completion":" SynthDef(\\lead2, {\n        var snd, scale, trigger;\n        snd = Saw.ar(\\freq.kr(440));\n        5.do {\n                snd = snd + DelayC.ar(snd, 0.2, LFNoise2.kr(3 ! 2).linlin(-1, 1, 0, 1) * 1e-3);\n        };\n        snd = snd * -10.dbamp;\n        snd = snd * Env.asr(0.01, 1, 0.03, curve: 4).ar(Done.freeSelf, \\gate.kr(1));\n        snd = snd * -28.dbamp;\n        Out.ar(\\out.kr(0), snd);\n}).add; END"}
{"prompt":"synth, bass, distorted, sharp, gllitchy, random, interesting, lfo, ufo, weird, metallic\n\n###\n\n","completion":" var lfo;\r\n\r\nlfo = { |rate = 1|\r\n\tSelect.ar(ToggleFF.ar(Dust.ar(rate)), [\r\n\t\tLFNoise2.ar(rate),\r\n\t\tTRand.ar(-1, 1, Dust.ar(rate * 3)),\r\n\t]);\r\n};\r\nSynthDef(\\weirdBass, {\r\n\tvar snd, rate, duration;\r\n\tduration = \\duration.kr(1);\r\n\trate = 1;\r\n\tsnd = SinOsc.ar(90 * (2 ** lfo.(rate)));\r\n\tsnd = (snd * lfo.(rate).linlin(-1, 1, 0, 20).lag(0.05).dbamp).fold2;\r\n\tsnd = RLPF.ar(snd, lfo.(rate).lag(0.01).linexp(-1, 1, 1000, 2000), 0.3);\r\n\tsnd = PitchShift.ar(snd, ExpRand(0.01, 0.04), XLine.kr(ExpRand(0.5, 1), ExpRand(0.5, 1), duration)) * 20.dbamp;\r\n\tsnd = BLowShelf.ar(snd, 500, 0.3, 5);\r\n\tsnd = Limiter.ar(snd);\r\n\tsnd = (snd * 10.dbamp).fold2;\r\n\tsnd = snd + (GVerb.ar(snd, ExpRand(1, 10), ExpRand(1, 3), maxroomsize: 10) * -20.dbamp);\r\n\tsnd = snd + (PitchShift.ar(snd, ExpRand(0.001, 0.04), XLine.kr(ExpRand(0.5, 2), ExpRand(0.5, 2), duration)) * 6.dbamp);\r\n\tsnd = snd * Env.asr(0.3, 1, 0.01, curve: 4).ar(Done.freeSelf, \\gate.kr(1));\r\n\tsnd = snd * -15.dbamp;\r\n\tOut.ar(\\out.kr(0), snd);\r\n}).add;\r\n) END"}
{"prompt":"synth, bass, sharp, phased, weird, phase, glitchy, lfo, alien\n\n###\n\n","completion":" var lfo;\r\n\r\nlfo = { |rate = 1|\r\n\tSelect.ar(ToggleFF.ar(Dust.ar(rate)), [\r\n\t\tLFNoise2.ar(rate),\r\n\t\tTRand.ar(-1, 1, Dust.ar(rate * 3)),\r\n\t]);\r\n};\r\nSynthDef(\\weirdBass2, {\r\n\tvar snd, rate, duration;\r\n\tduration = \\duration.kr(1);\r\n\trate = XLine.kr(1, 16, duration);\r\n\tsnd = SinOsc.ar(3040 * (2 ** (2 * lfo.(rate)))) * lfo.(rate).lag(0.01) * 3000;\r\n\tsnd = SinOsc.ar((140 * (2 ** (2 * lfo.(rate)))) + snd);\r\n\tsnd = (snd * lfo.(rate).linlin(-1, 1, 10, 20).lag(0.01).dbamp).fold2;\r\n\tsnd = BPF.ar(snd, lfo.(rate ! 3).lag(0.02).linexp(-1, 1, 800, 1000) * [0.5, 1.56, 1.34], 0.1).sum;\r\n\tsnd = LPF.ar(snd, XLine.kr(3000, 16e3, duration));\r\n\tsnd = Latch.ar(snd, Impulse.ar(lfo.(3).linexp(-1, 1, 1000, 16e3)));\r\n\tsnd = LPF.ar(snd, XLine.kr(3000, 8e3, duration));\r\n\tsnd = (snd * 3).tanh * 5.dbamp;\r\n\tsnd = BHiShelf.ar(snd, 3000, 1, -5);\r\n\tsnd = Pan2.ar(snd, \\pan.kr(0));\r\n\tsnd = snd * Env.asr(0.3, 1, 0.01, curve: 4).ar(Done.freeSelf, \\gate.kr(1));\r\n\tsnd = snd * -15.dbamp;\r\n\tOut.ar(\\out.kr(0), snd);\r\n}).add; END"}
{"prompt":"drum, snare, hit, rim, tonal, distorted, loud, trash can, can, distort, noise, noisy, ring, ringy\n\n###\n\n","completion":" SynthDef(\\snare, {\r\n\tvar snd;\r\n\tsnd = SinOsc.ar(330 * (1 + (6 * Env.perc(0.001, 0.03, curve: -6).ar)));\r\n\tsnd = snd + (BPF.ar(Hasher.ar(Sweep.ar), 2230, 0.2) * Env.perc(0.05, 0.1).ar * -5.dbamp);\r\n\tsnd = snd + (5.dbamp * SinOsc.ar(XLine.ar(3000, 100, 0.01)) * Env.perc(0, 0.01).ar);\r\n\tsnd = snd ! 2;\r\n\tsnd = snd + PitchShift.ar(snd, 0.04, 1.3, 0.001, 0.001);\r\n\tsnd = snd + PitchShift.ar(snd * 3.dbamp, 0.03, 1.6, 0.001, 0.001);\r\n\tsnd = snd + PitchShift.ar(snd * 1.dbamp, 0.06, 3.6, 0.01, 0.01);\r\n\tsnd = snd + FreqShift.ar(snd, 130);\r\n\tsnd = snd * (1 + (2 * Env.perc(0, 0.1).ar));\r\n\tsnd = LeakDC.ar(snd);\r\n\tsnd = (snd * (\\drive.kr(0) * 10).dbamp).tanh;\r\n\tsnd = snd * Env.adsr(0.001, 0.6 * (1 + \\drive.kr(0)), 0, 0.01).ar(Done.freeSelf, \\gate.kr(1));\r\n\tsnd = snd * 10.dbamp;\r\n\tOut.ar(\\out.kr(0), snd);\r\n}).add; END"}
{"prompt":"synth, pad, sustain, sustained, melodic, soft, quiet, ring, lead\n\n###\n\n","completion":" SynthDef(\\pad, {\r\n\tvar snd;\r\n\tsnd = LFTri.ar(\\freq.kr(440) * ({ LFNoise2.kr(3) * 0.2 } ! 5).midiratio);\r\n\tsnd = Splay.ar(snd);\r\n\tsnd = (snd * -20.dbamp) + BPF.ar([snd], { ExpRand(800, 8120) } ! 3, 0.1).sum;\r\n\tsnd = (snd * 16).round \/ 16;\r\n\tsnd = snd * Env.asr(0.2, 1, 0.03, curve: 4).ar(Done.freeSelf, \\gate.kr(1));\r\n\tsnd = snd * -18.dbamp;\r\n\tOut.ar(\\out.kr(0), snd);\r\n}).add; END"}
{"prompt":"synth, lead, boxy, box, loud, sustain, sustained, chiptune, saw, sawwave, wave, glitchy\n\n###\n\n","completion":" SynthDef(\\lead, {\r\n\tvar snd, scale, trigger;\r\n\ttrigger = Dust.ar(0.3);\r\n\tsnd = LFSaw.ar(\\freq.kr(440));\r\n\tsnd = RLPF.ar(snd, TExpRand.ar(100, 8000, trigger).lag(0.01), 0.3).clip2;\r\n\tscale = 2 ** 8;\r\n\tsnd = snd * scale;\r\n\tsnd = snd bitAnd: TRand.ar(0, scale, trigger);\r\n\tsnd = snd bitXor: TRand.ar(0, scale, trigger);\r\n\tsnd = snd.linlin(0, scale, -1, 1);\r\n\tsnd = snd * Env.asr(0.01, 1, 0.03, curve: 4).ar(Done.freeSelf, \\gate.kr(1));\r\n\tsnd = snd * -18.dbamp;\r\n\tsnd = Pan2.ar(snd, TRand.ar(-0.5, 0.5, trigger));\r\n\tOut.ar(\\out.kr(0), snd);\r\n}).add; END"}
{"prompt":"synth, lead, sustain, sustained, phased, phasey, phase\n\n###\n\n","completion":" SynthDef(\\bass, {\r\n\tvar snd, freq;\r\n\tfreq = \\freq.kr(440);\r\n\tsnd = Saw.ar(freq);\r\n\t5.do {\r\n\t\tsnd = snd + DelayC.ar(snd, 0.2, LFNoise2.kr(3 ! 2).linlin(-1, 1, 0, 1) * 2e-3);\r\n\t};\r\n\tsnd = (SinOsc.ar(freq) * 3).tanh + (HPF.ar(snd, 400) * -10.dbamp);\r\n\tsnd = snd * -10.dbamp;\r\n\tsnd = snd * Env.asr(0.01, 1, 0.03, curve: 4).ar(Done.freeSelf, \\gate.kr(1));\r\n\tsnd = snd * -20.dbamp;\r\n\tOut.ar(\\out.kr(0), snd);\r\n}).add; END"}
{"prompt":"synth, sawtooth, sawwave, wave, chiptune, sustain, sustained, loud\n\n###\n\n","completion":" SynthDef(\\acid, {\r\n\tvar snd, freq, duration;\r\n\tduration = \\duration.kr(1);\r\n\tfreq = \\freq.kr(440);\r\n\tsnd = Saw.ar(freq);\r\n\tsnd = Latch.ar(snd, Impulse.ar(ExpRand(3e3, 16e3)));\r\n\tsnd = MoogFF.ar(snd, (ExpRand(100, 2000) * (Env.perc(0.001, Rand(0.1, 0.3)).ar * Rand(10, 30)).midiratio * [1, 1.5]).min(16e3), 3).sum;\r\n\tsnd = (snd * 3).fold2;\r\n\tsnd = snd * Env.asr(0.001, 1, 0.03).ar(Done.freeSelf, \\gate.kr(1));\r\n\tsnd = snd * -20.dbamp;\r\n\tsnd = Pan2.ar(snd, \\pan.kr(0));\r\n\tOut.ar(\\out.kr(0), snd);\r\n}).add; END"}
{"prompt":"synth, sustain, sustained, lead, phased, phase, phasey, bright, wave, wavey\n\n###\n\n","completion":" SynthDef(\\lead2, {\r\n\tvar snd, scale, trigger;\r\n\tsnd = Saw.ar(\\freq.kr(440));\r\n\t5.do {\r\n\t\tsnd = snd + DelayC.ar(snd, 0.2, LFNoise2.kr(3 ! 2).linlin(-1, 1, 0, 1) * 1e-3);\r\n\t};\r\n\tsnd = snd * -10.dbamp;\r\n\tsnd = snd * Env.asr(0.01, 1, 0.03, curve: 4).ar(Done.freeSelf, \\gate.kr(1));\r\n\tsnd = snd * -28.dbamp;\r\n\tOut.ar(\\out.kr(0), snd);\r\n}).add; END"}
{"prompt":"synth, sustain, sustained, lead, phased, phase, phasey, bright, wave, wavey\n\n###\n\n","completion":" SynthDef(\\bass, {\r\n\tvar snd, freq;\r\n\tfreq = \\freq.kr(440);\r\n\tsnd = Saw.ar(freq);\r\n\t5.do {\r\n\t\tsnd = snd + DelayC.ar(snd, 0.2, LFNoise2.kr(3 ! 2).linlin(-1, 1, 0, 1) * 2e-3);\r\n\t};\r\n\tsnd = (SinOsc.ar(freq) * 3).tanh + (HPF.ar(snd, 400) * -10.dbamp);\r\n\tsnd = snd * -10.dbamp;\r\n\tsnd = snd * Env.asr(0.01, 1, 0.03, curve: 4).ar(Done.freeSelf, \\gate.kr(1));\r\n\tsnd = snd * -20.dbamp;\r\n\tOut.ar(\\out.kr(0), snd);\r\n}).add; END"}
{"prompt":"synth, fast, quick, drop, kick, pitchdown, pitch\n\n###\n\n","completion":" SynthDef(\\fastDrop, {\n    var snd;\n    snd = SinOsc.ar(60 * (1 + (4 * Env.perc(0, 0.2, curve: -6).ar)) * (1 + (0.3 * Env.perc(0, 0.7, curve: -3).ar)));\n    snd = snd + (BLowPass.ar(Hasher.ar(Sweep.ar), 6120, 0.3) * Env.perc(0.001, 0.02).ar * -12.dbamp);\n    snd = snd * (1 + Env.perc(0.0, 0.7).ar);\n    snd = snd.cubed;\n    snd = snd * Env.adsr(0.002, 0.5, 0, 0.01, curve: -5).ar(Done.freeSelf, \\gate.kr(1));\n    snd = snd * -6.dbamp;\n    snd = snd.dup;\n    Out.ar(\\out.kr(0), snd);\n}).add; END"}
{"prompt":"synth, sustain, sustained, acid, bright, lead, grunge, distorted, distort, loud\n\n###\n\n","completion":" SynthDef(\\acid, {\r\n\tvar snd, freq, duration;\r\n\tduration = \\duration.kr(1);\r\n\tfreq = \\freq.kr(440);\r\n\tsnd = Saw.ar(freq);\r\n\tsnd = Latch.ar(snd, Impulse.ar(ExpRand(3e3, 16e3)));\r\n\tsnd = MoogFF.ar(snd, (ExpRand(100, 2000) * (Env.perc(0.001, Rand(0.1, 0.3)).ar * Rand(10, 30)).midiratio * [1, 1.5]).min(16e3), 3).sum;\r\n\tsnd = (snd * 3).fold2;\r\n\tsnd = snd * Env.asr(0.001, 1, 0.03).ar(Done.freeSelf, \\gate.kr(1));\r\n\tsnd = snd * -20.dbamp;\r\n\tsnd = Pan2.ar(snd, \\pan.kr(0));\r\n\tOut.ar(\\out.kr(0), snd);\r\n}).add; END"}
{"prompt":"drum, bassdrum, kick, layered, layer, transient\n\n###\n\n","completion":" SynthDef(\\kick, {\r\n\tvar snd, velocity;\r\n\tvelocity = \\velocity.kr(1);\r\n\tsnd = SinOsc.ar(58 * (1 + (3 * Env.perc(0.001, 0.03).ar) * velocity) * (1 + (0.5 * Env.perc(0.001, 0.3).ar) * velocity));\r\n\tsnd = snd * (1 + (3 * Env.perc(0, 0.03).ar * velocity));\r\n\tsnd = snd + (BPF.ar(Hasher.ar(Sweep.ar).pow(9.0), 16328, 0.3) * Env.perc(0.01, 0.04).ar * 5.dbamp);\r\n\tsnd = snd.clip2;\r\n\tsnd = snd.tanh;\r\n\tsnd = snd * Env.perc(0.001, 0.5 * velocity).ar(Done.freeSelf);\r\n\tsnd = snd * -3.dbamp;\r\n\tsnd = snd * \\amp.kr(1);\r\n\tsnd = snd ! 2;\r\n\tOut.ar(\\out.kr(0), snd);\r\n}).add; END"}
{"prompt":"drum, snare, reverb, echo, long, wet, tom, high, tonal\n\n###\n\n","completion":" SynthDef(\\snare, {\r\n\tvar snd, velocity;\r\n\tvelocity = \\velocity.kr(1);\r\n\tsnd = SinOsc.ar(228 * (1 + (0.5 * Env.perc(0.003, 0.012).ar)) * [1, 1.6, 3.5, 6.4, 8.8]);\r\n\tsnd = snd * Env.perc(0, [1, 0.6, 0.3, 0.05, 0.1]).ar;\r\n\tsnd = snd * [0, -2, -5, -8, -12].dbamp;\r\n\tsnd = snd.sum;\r\n\tsnd = snd * (1 + (1.6 * Env.perc(0, 0.07).ar));\r\n\tsnd = snd + (BPF.ar(Hasher.ar(Sweep.ar).pow(2.0), 2310, 0.3) * Env.perc(0.03, 0.16).ar * -2.dbamp);\r\n\tsnd = LPF.ar(snd, velocity.linexp(0, 1, 1000, 16000));\r\n\tsnd = (snd * -3.dbamp).clip2;\r\n\tsnd = snd * Env.perc(0.001, \\decay.kr(1) * 0.7, curve: -1).ar;\r\n\tsnd = snd * -5.dbamp;\r\n\tsnd = snd * velocity;\r\n\tsnd = snd * \\amp.kr(1);\r\n\tsnd = Pan2.ar(snd, \\pan.kr(0)) * 3.dbamp + GVerb.ar(snd * -15.dbamp, 10, 3);\r\n\tsnd = snd * Env.perc(0.0, 3).ar(Done.freeSelf);\r\n\tOut.ar(\\out.kr(0), snd);\r\n}).add; END"}
{"prompt":"synth, fast, quick, drop, pitchdown, pitch, chiptune, blip, small, bright\n\n###\n\n","completion":" SynthDef(\\synth20, {\n    var snd;\n    snd = Pulse.ar(80 * (1 + (5 * Env.perc(0, 0.1, curve: -6).ar)) * (1 + (0.5 * Env.perc(0, 0.5, curve: -3).ar)));\n    snd = snd + (BPF.ar(Hasher.ar(Sweep.ar), 6130, 0.3) * Env.perc(0.001, 0.02).ar * -10.dbamp);\n    snd = snd * (1 + Env.perc(0.0, 0.4).ar);\n    snd = snd.sin;\n    snd = snd * Env.adsr(0.001, 0.6, 0, 0.01, curve: -8).ar(Done.freeSelf, \\gate.kr(1));\n    snd = snd * -3.dbamp;\n    snd = snd ! 2;\n    Out.ar(\\out.kr(0), snd);\n}).add; END"}
{"prompt":"drum, snare, standard, \n\n###\n\n","completion":" SynthDef(\\snare2, {\n        var snd, velocity;\n        velocity = \\velocity.kr(1);\n        snd = SinOsc.ar(198 * (1 + (0.5 * Env.perc(0.003, 0.012).ar)) * [1, 1.6, 3.5, 6.4, 8.8]);\n        snd = snd * Env.perc(0, [1, 0.6, 0.3, 0.05, 0.1]).ar;\n        snd = snd * [0, -2, -5, -8, -12].dbamp;\n        snd = snd.sum;\n        snd = snd * (1 + (1.6 * Env.perc(0, 0.07).ar));\n        snd = snd + (BPF.ar(Hasher.ar(Sweep.ar), 2310, 0.3) * Env.perc(0.03, 0.16).ar * 5.dbamp * velocity);\n        snd = LPF.ar(snd, velocity.linexp(0, 1, 1000, 16000));\n        snd = (snd * -3.dbamp).clip2;\n        snd = snd * Env.perc(0.001, 0.7 * velocity, curve: -0.5).ar;\n        snd = snd * -8.dbamp;\n        snd = snd * velocity;\n        snd = snd * \\amp.kr(1);\n        snd = Pan2.ar(snd, \\pan.kr(0)) * 3.dbamp + GVerb.ar(snd * -15.dbamp, 10, 3);\n        snd = snd * Env.perc(0.0, 1).ar(Done.freeSelf);\n        Out.ar(\\out.kr(0), snd);\n}).add; END"}
{"prompt":"percussive, clap-like, short duration, noise generator, low-pass filter, sweep, ADSR envelope, negative gain, mono\n\n\n###\n\n","completion":" SynthDef(\\percBass, {\n    var snd;\n    snd = SinOsc.ar(60, 0, (1 + (4 * Env.perc(0, 0.2, curve: -6).ar)));\n    snd = snd + (BLowPass.ar(Hasher.ar(Sweep.ar), 6120, 0.3));\n    snd = snd * Env.adsr(0.002, 0.5, 0, 0.01, curve: -5).ar(Done.freeSelf, \\gate.kr(1));\n    snd = snd * -6.dbamp;\n    Out.ar(\\out.kr(0), snd.dup);\n}).add; END"}
{"prompt":"sawtooth wave, high frequency, percussive, high-pass filter, hashed, sweep, ADSR envelope, negative gain, stereo\n\n###\n\n","completion":" SynthDef(\\modSaw, {\n    var snd;\n    snd = Saw.ar(50, 0, (1 + (3 * Env.perc(0, 0.1, curve: -8).ar)));\n    snd = snd + (BHiPass.ar(Hasher.ar(Sweep.ar), 6130, 0.3));\n    snd = snd * Env.adsr(0.001, 0.5, 0, 0.01, curve: -7).ar(Done.freeSelf, \\gate.kr(1));\n    snd = snd * -2.dbamp;\n    Out.ar(\\out.kr(0), snd ! 2);\n}).add; END"}
{"prompt":"sinusoidal, lead, mid-high frequency, percussive, band-pass filter, hashed, sweep, ADSR envelope, negative gain, stereo\r\n\n\n###\n\n","completion":" SynthDef(\\sineLead, {\n    var snd;\n    snd = SinOsc.ar(440, 0, (1 + (2 * Env.perc(0, 0.1, curve: -4).ar)));\n    snd = snd + (BPF.ar(Hasher.ar(Sweep.ar), 7000, 0.3));\n    snd = snd * Env.adsr(0.001, 0.5, 0, 0.01, curve: -5).ar(Done.freeSelf, \\gate.kr(1));\n    snd = snd * -4.dbamp;\n    Out.ar(\\out.kr(0), snd ! 2);\n}).add; END"}
{"prompt":"white noise, filtered, frequency sweep, band-pass filter, linear envelope, short attack, medium sustain, short release, stereo\r\n\n###\n\n","completion":" SynthDef(\\noiseSweep, {\n    var snd;\n    snd = WhiteNoise.ar(0.1);\n    snd = BPF.ar(snd, XLine.kr(200, 8000, 5));\n    snd = snd * Env.linen(0.1, 0.5, 0.1, 1).ar(Done.freeSelf);\n    Out.ar(\\out.kr(0), snd ! 2);\n}).add; END"}
{"prompt":"pulse wave, saw, modulated, sinusoidal LFO, medium frequency, linear envelope, short attack, medium sustain, short release, stereo\r\n\n\n###\n\n","completion":" SynthDef(\\pulsePad, {\n    var snd, mod;\n    mod = SinOsc.kr(0.2);\n    snd = Pulse.ar(440, mod.range(0.1, 0.6));\n    snd = snd * Env.linen(0.1, 0.5, 0.1, 1).ar(Done.freeSelf);\n    Out.ar(\\out.kr(0), snd ! 2);\n}).add; END"}
{"prompt":"bell-like, high-pitched, resonant, bright, short-start, long-fade, stereo\r\n\n\n###\n\n","completion":" SynthDef(\\fmBell, {\n    var snd, mod;\n    mod = SinOsc.ar(440 * 2);\n    snd = SinOsc.ar(440, mod * 0.1);\n    snd = snd * Env.perc(0.01, 1, 0.5).ar(Done.freeSelf);\n    Out.ar(\\out.kr(0), snd ! 2);\n}).add; END"}
{"prompt":"organ, layered, multi-pitch, rich-harmonics, bright, short-start, medium-sustain, short-fade, stereo\r\n\n\n###\n\n","completion":" SynthDef(\\spaceOrgan, {\n    var snd, freqs, amps;\n    freqs = [440, 880, 1320, 1760];\n    amps = [1, 0.5, 0.33, 0.25];\n    snd = Mix(SinOsc.ar(freqs, 0, amps));\n    snd = snd * Env.linen(0.1, 0.5, 0.1, 1).ar(Done.freeSelf);\n    Out.ar(\\out.kr(0), snd ! 2);\n}).add; END"}
{"prompt":"sinusoidal, sine, sinewave, sin, sweep, high-to-low, pitch, pitch-sweep, bouncing-effect, stereo, downsweep\r\n\n\n###\n\n","completion":" SynthDef(\\bounceBall, {\n    var snd, freq;\n    freq = XLine.kr(1000, 100, 1, doneAction: Done.freeSelf);\n    snd = SinOsc.ar(freq);\n    Out.ar(\\out.kr(0), snd ! 2);\n}).add; END"}
{"prompt":"pulse wave, bass, low-frequency, wobble, modulated, sinusoidal LFO, ADSR envelope, quick-attack, medium-sustain, long-decay, negative gain, stereo, distorted, continuous, sustain, sustained \n\n###\n\n","completion":" SynthDef(\\wobbleBass, {\n    var snd, mod;\n    mod = SinOsc.kr(6).range(0.1, 0.6);\n    snd = Pulse.ar(60, mod);\n    snd = snd * Env.adsr(0.01, 0.4, 0.6, 0.2).ar(Done.freeSelf, \\gate.kr(1));\n    snd = snd * -8.dbamp;\n    Out.ar(\\out.kr(0), snd ! 2);\n}).add; END"}
{"prompt":"white noise, metallic, percussive, high-to-low frequency sweep, filtered, resonant low-pass filter, short-attack, long-decay, stereo, trash can, trash, laser, lazer\n\n\n###\n\n","completion":" SynthDef(\\metallicPerc, {\n    var snd;\n    snd = RLPF.ar(WhiteNoise.ar(0.1), XLine.kr(8000, 100, 1));\n    snd = snd * Env.perc(0.01, 1).ar(Done.freeSelf);\n    Out.ar(\\out.kr(0), snd ! 2);\n}).add; END"}
{"prompt":"synth, saw, sawtooth, sawtooth wave, alien, communication, slightly detuned, frequency sweep, band-pass filter, short-start, medium-sustain, short-fade, mono, radio tuning, sci-fi\r\n\n\n###\n\n","completion":" SynthDef(\\alienComm, {\n    var snd;\n    snd = LFSaw.ar([700, 701], 0, 0.1);\n    snd = BPF.ar(snd, XLine.kr(500, 2000, 10));\n    snd = snd * Env.linen(0.1, 0.5, 0.1, 1).ar(Done.freeSelf);\n    Out.ar(\\out.kr(0), snd);\n}).add; END"}
{"prompt":"white noise, stretched, string, comb filter, long duration, decaying, resonance, linear envelope, short attack, medium sustain, short fade, stereo, reverb, echo, string instrument, drone\r\n\n###\n\n","completion":" SynthDef(\\stretchedString, {\n    var snd;\n    snd = CombL.ar(WhiteNoise.ar(0.01), 0.1, XLine.kr(0.01, 0.1, 10), 3);\n    snd = snd * Env.linen(0.1, 0.5, 0.1, 1).ar(Done.freeSelf);\n    Out.ar(\\out.kr(0), snd ! 2);\n}).add; END"}
{"prompt":"sinusoidal, lead, vibrato, medium-high frequency, linear envelope, short attack, medium sustain, short fade, stereo, sine\r\nshort\n\n###\n\n","completion":" SynthDef(\\vibratoLead, {\n    var snd;\n    snd = SinOsc.ar(Vibrato.kr(440, 0.02, 5, 1, 0.1));\n    snd = snd * Env.linen(0.1, 0.5, 0.1, 1).ar(Done.freeSelf);\n    Out.ar(\\out.kr(0), snd ! 2);\n}).add; END"}
{"prompt":"sinusoidal, sinewave, sin, percussive, short attack, layered, harmonic series, splayed, comb filter, noise modulation, limited, low gain, stereo, delay, long tail, long decay\n\n###\n\n","completion":" SynthDef(\\bell1, {\nvar snd;\nsnd = Mix.fill(8, { arg i;\nvar freq = 440 * 2.pow(i \/ 8);\nSinOsc.ar(freq, 0, Env.perc(0.001, 0.1).ar)\n});\nsnd = Splay.ar(snd);\nsnd = CombN.ar(snd, 0.2, LFNoise0.kr(1).range(0.1, 0.3), 8);\nsnd = Limiter.ar(snd);\nsnd = snd * 0.1;\nOut.ar(0, snd ! 2);\n}).add; END"}
{"prompt":"white noise, pink noise, pluck, comb filter, noise modulation, stereo panning, long decay, quiet, echo, sinewave, sin, long tail\n\n\n###\n\n","completion":" SynthDef(\\piano1, {\nvar snd;\nsnd = Mix.fill(8, { arg i;\nvar freq = 440 * 2.pow(i \/ 8);\nvar env = EnvGen.kr(Env.perc(0.001, 1), doneAction: 2);\nPan2.ar(\nCombN.ar(\nPluck.ar(PinkNoise.ar, freq, env),\n0.2, LFNoise0.kr(1).range(0.01, 0.1), 4\n),\nLFNoise0.kr(1).range(-0.5, 0.5)\n)\n});\nsnd = Limiter.ar(snd);\nsnd = snd * 0.2;\nOut.ar(0, snd);\n}).add;\n) END"}
{"prompt":"pad, sinusoidal, feedback oscillator, harmonic series, long attack, long release, reverb, limited, medium gain, sinewave, sin, drone, ambient, spacious, roomy, continuous, sustained, sustain\n\n###\n\n","completion":" SynthDef(\\pad1, {\nvar snd;\nsnd = Mix.fill(5, { arg i;\nvar freq = 440 * 2.pow(i \/ 5);\nSinOscFB.ar(freq, 0.2)\n});\nsnd = Mix(snd) * EnvGen.kr(Env([0,1,0.5], [3, 3], [-4, -4]), doneAction: 2);\nsnd = FreeVerb.ar(snd, room: 0.8);\nsnd = Limiter.ar(snd);\nsnd = snd * 0.3;\nOut.ar(0, snd);\n}).add;\n END"}
{"prompt":"bass, triangle wave, low frequency, low-pass filter, random filter, percussive, short attack, medium decay, low shelf\r\n\n\n###\n\n","completion":" SynthDef(\\bass2, {\nvar snd;\nsnd = LFTri.ar([60, 62]*2);\nsnd = RLPF.ar(snd, 800 + 800.rand, 0.2);\nsnd = snd * EnvGen.kr(Env.perc(0.01, 0.5, -4), doneAction: 2);\nsnd = LeakDC.ar(snd);\nsnd = BLowShelf.ar(snd, 80, 2, 6);\nsnd = Limiter.ar(snd);\nOut.ar(0, snd);\n}).add; END"}
{"prompt":"sinusoidal, sinewave, sin, sine, harmonic series, percussive, short attack, long decay, stereo panning, noise modulation, tanh distortion, reverb, limited, medium gain, abrupt, one-shot\r\n\r\n\n\n###\n\n","completion":" SynthDef(\\keys1, {\nvar snd;\nsnd = Mix.fill(8, {arg i;\nvar freq = 440 * 2.pow(i \/ 8);\nvar env = EnvGen.kr(Env.perc(0.01, 1, -4), doneAction: 2);\nvar pos = LFNoise0.kr(1).range(-0.5, 0.5);\nPan2.ar(SinOsc.ar(freq, 0, env), pos)\n});\nsnd = Mix(snd).tanh;\nsnd = FreeVerb.ar(snd, room: 0.5);\nsnd = Limiter.ar(snd);\nsnd = snd * 0.3;\nOut.ar(0, snd);\n}).add; END"}
{"prompt":"pad, sinusoidal, feedback oscillator, harmonic series, stereo panning, noise modulation, long attack, long decay, reverb, limited, medium gain, sinewave, sin, sine, sustained, sustain, continuous\r\n\n###\n\n","completion":" SynthDef(\\pad2, {\nvar snd;\nsnd = Mix.fill(3, {arg i;\nvar freq = 440 * 2.pow(i \/ 3);\nSinOscFB.ar(freq, 0.4)\n});\nsnd = Pan2.ar(snd, LFNoise0.kr(1).range(-0.5, 0.5));\nsnd = snd * EnvGen.kr(Env.perc(0.4, 3));\nsnd = GVerb.ar(snd, 12, 2);\nsnd = Limiter.ar(snd);\nsnd = snd * 0.4;\nOut.ar(0, snd);\n}).add;\n END"}
{"prompt":"sinusoidal, high frequency, percussive, short attack, quick decay, harmonic series, splayed, all-pass filter, limited, low gain, alien, gun, sci-fi, rapid, one-shot, sinewave, sin, sine\n\n\n###\n\n","completion":" SynthDef(\\bell2, {\nvar snd;\nsnd = Mix.fill(12, {arg i;\nvar freq = 440 * 2.pow(i \/ 12);\nvar env = EnvGen.kr(Env.perc(0.01, 0.1), doneAction: 2);\nSinOsc.ar(freq, 0, env)\n});\nsnd = Splay.ar(snd);\nsnd = AllpassN.ar(snd, 0.040, [0.050, 0.051, 0.049]);\nsnd = Limiter.ar(snd);\nsnd = snd * 0.2;\nOut.ar(0, snd);\n}).add; END"}
{"prompt":"bass, triangle wave, low frequency, resonant low-pass filter, percussive, short attack, medium decay, peak EQ, high shelf filter, limited, one-shot, low-end, dark, muted\r\n\n\n###\n\n","completion":" SynthDef(\\bass4, {\nvar snd;\nsnd = LFTri.ar([50, 52]);\nsnd = RLPF.ar(snd, 100, 0.3);\nsnd = snd * EnvGen.kr(Env.perc(0.01, 0.6), doneAction: 2);\nsnd = LeakDC.ar(snd);\nsnd = BPeakEQ.ar(snd, 65, 1, 8);\nsnd = BHiShelf.ar(snd, 180, 1, -12);\nsnd = Limiter.ar(snd);\nOut.ar(0, snd);\n}).add; END"}
{"prompt":"short attack, medium decay, all-pass filter, reverb, limited, medium gain, stereo, dynamic pitch, screech, loud, random, stochastic, noisy, one-shot\r\n\n\n###\n\n","completion":" SynthDef(\\guitar2, {\nvar snd;\nsnd = Mix.fill(4, {arg i;\nvar freq = Line.kr(300, 600, 8);\nvar env = EnvGen.kr(Env.perc(0.01, 0.5), doneAction: 2);\nGendy1.ar(freq, i*0.1, env)\n});\nsnd = AllpassC.ar(snd, 0.1, [0.2, 0.201], 4);\nsnd = FreeVerb.ar(snd, mix: 0.6);\nsnd = Limiter.ar(snd);\nsnd = snd * 0.4;\nOut.ar(0, snd);\n}).add; END"}
{"prompt":"sawtooth wave, lead, distorted, short attack, medium decay, all-pass filter, delay, comb filter, reverb, limited, medium gain, sweeping pitch, resonant, one-shot, echo\r\n\n###\n\n","completion":" SynthDef(\\lead2, {\nvar snd;\nsnd = LFSaw.ar(\nLine.kr(200, 600, 6)\n).distort;\nsnd = snd * EnvGen.kr(Env.perc(0.01, 0.3, curve: -4), doneAction: 2);\nsnd = AllpassN.ar(snd, 0.05, [0.1, 0.1001, 0.0999], 2);\nsnd = snd + CombL.ar(DelayC.ar(snd, 0.4, 0.4), 0.2, 0.2, 4);\nsnd = FreeVerb.ar(snd, room: 0.7);\nsnd = Limiter.ar(snd);\nsnd = snd * 0.5;\nOut.ar(0, snd);\n}).add; END"}
{"prompt":"sinusoidal, high frequency, percussive, short attack, medium decay, multi-pitch, mono, glass, hit, sinewave, sin, sine, one-shot, soft, high-pitch\r\n\n\n###\n\n","completion":" SynthDef(\\glassHit, {\n    var snd;\n    snd = SinOsc.ar([1000, 2000, 3000, 4000], 0, 0.2);\n    snd = snd * Env.perc(0.01, 0.5).ar(Done.freeSelf);\n    Out.ar(\\out.kr(0), snd);\n}).add; END"}
{"prompt":"sinusoidal, low frequency, percussive, short attack, soft, medium decay, mono, stomp, short, kick, bassdrum, stereo, sinewave, sin, sine, one-shot\n\n\n###\n\n","completion":" SynthDef(\\stomp, {\n    var snd;\n    snd = SinOsc.ar(XLine.kr(100, 50, 0.2));\n    snd = snd * Env.perc(0.01, 0.5).ar(Done.freeSelf);\n    Out.ar(\\out.kr(0), snd ! 2);\n}).add; END"}
{"prompt":"sinusoidal, high frequency, percussive, short attack, short decay, frequency sweep, upsweep, stereo, zap, quick, sinewave, sin, sine, one-shot\r\n\n\n###\n\n","completion":" SynthDef(\\zap, {\n    var snd;\n    snd = SinOsc.ar(XLine.kr(1000, 2000, 0.1));\n    snd = snd * Env.perc(0.01, 0.2).ar(Done.freeSelf);\n    Out.ar(\\out.kr(0), snd ! 2);\n}).add; END"}
{"prompt":"mid frequency, percussive, short attack, medium decay, multi-pitch, mono, steel drum, sinewave, sin, sine, one-shot\r\n\n\n###\n\n","completion":" SynthDef(\\steelDrum, {\n    var snd;\n    snd = SinOsc.ar([200, 400, 600, 800], 0, 0.1);\n    snd = snd * Env.perc(0.01, 0.5).ar(Done.freeSelf);\n    Out.ar(\\out.kr(0), snd);\n}).add; END"}
{"prompt":"high frequency, percussive, short attack, medium decay, frequency sweep, upsweep, loud, ping, ding, stereo, whistle, sinewave, sin, sine, one-shot\r\n\n\n###\n\n","completion":" SynthDef(\\whistle, {\n    var snd;\n    snd = SinOsc.ar(XLine.kr(2000, 3000, 0.2));\n    snd = snd * Env.perc(0.01, 0.5).ar(Done.freeSelf);\n    Out.ar(\\out.kr(0), snd ! 2);\n}).add; END"}
{"prompt":"white noise, high-pass filter, high frequency, percussive, short attack, quick decay, stereo, tambourine, one-shot, hat, close, closed, hi-hat\r\n\n\n###\n\n","completion":" SynthDef(\\tambourine, {\n    var snd;\n    snd = WhiteNoise.ar(0.3);\n    snd = HPF.ar(snd, 3000);\n    snd = snd * Env.perc(0.01, 0.1).ar(Done.freeSelf);\n    Out.ar(\\out.kr(0), snd ! 2);\n}).add; END"}
{"prompt":"mid-high frequency, percussive, short attack, medium decay, multi-pitch, mono, cowbell, sinewave, sin, sine, one-shot, ding, gong\n\n###\n\n","completion":" SynthDef(\\cowbell, {\n    var snd;\n    snd = SinOsc.ar([560, 1120], 0, 0.2);\n    snd = snd * Env.perc(0.01, 0.5).ar(Done.freeSelf);\n    Out.ar(\\out.kr(0), snd);\n}).add; END"}
{"prompt":"high frequency, percussive, short attack, medium decay, high-pitch, mono, triangle, sinewave, sin, sine, one-shot\r\n\n\n###\n\n","completion":" SynthDef(\\triangle, {\n    var snd;\n    snd = SinOsc.ar([2000, 4000], 0, 0.2);\n    snd = snd * Env.perc(0.01, 0.5).ar(Done.freeSelf);\n    Out.ar(\\out.kr(0), snd);\n}).add; END"}
{"prompt":"high frequency, percussive, short attack, long decay, multi-pitch, mono, wind chime, delay, sinewave, sin, sine, one-shot\r\n\n\n###\n\n","completion":" SynthDef(\\windChime, {\n    var snd;\n    snd = Mix.fill(7, { |i| SinOsc.ar((i + 1) * 500, 0, 0.1) });\n    snd = DelayC.ar(snd, 0.5, { Rand(0.1, 0.5) });\n    snd = snd * Env.perc(0.01, 1).ar(Done.freeSelf);\n    Out.ar(\\out.kr(0), snd);\n}).add; END"}
{"prompt":"mid-low frequency, percussive, short attack, medium decay, multi-pitch, mono, conga, sinewave, sin, sine, one-shot, soft, xylophone, vibraphone\n\n###\n\n","completion":" SynthDef(\\conga, {\n    var snd;\n    snd = SinOsc.ar([200, 250], 0, 0.2);\n    snd = snd * Env.perc(0.01, 0.5).ar(Done.freeSelf);\n    Out.ar(\\out.kr(0), snd);\n}).add; END"}
{"prompt":"mid-high frequency, percussive, short attack, medium decay, multi-pitch, mono, ding, metallic, sinewave, sin, sine, one-shot\n\n\n###\n\n","completion":" SynthDef(\\woodBlock, {\n    var snd;\n    snd = SinOsc.ar([800, 850], 0, 0.2);\n    snd = snd * Env.perc(0.01, 0.5).ar(Done.freeSelf);\n    Out.ar(\\out.kr(0), snd);\n}).add; END"}
{"prompt":"mid-high frequency, percussive, short attack, medium decay, multi-pitch, mono, ding, metallic, sinewave, sin, sine, one-shot\r\n\n###\n\n","completion":" SynthDef(\\timbale, {\n    var snd;\n    snd = SinOsc.ar([500, 550], 0, 0.2);\n    snd = snd * Env.perc(0.01, 0.5).ar(Done.freeSelf);\n    Out.ar(\\out.kr(0), snd);\n}).add; END"}
{"prompt":"percussive, medium attack, medium decay, low-pitch, mono, timbale, sinewave, sin, sine, one-shot\r\n\n\n###\n\n","completion":" SynthDef(\\tamboura, {\n    var snd;\n    snd = Mix.fill(7, { |i| SinOsc.ar((i + 1) * 100, 0, 0.1) });\n    snd = DelayC.ar(snd, 0.5, { Rand(0.1, 0.5) });\n    snd = snd * Env.perc(0.01, 1).ar(Done.freeSelf);\n    Out.ar(\\out.kr(0), snd);\n}).add; END"}
{"prompt":"white noise, high-pass filter, mid frequency, percussive, short attack, quick decay, stereo, hat, hi-hat, high hat, closed, one-shot\r\n\n\n###\n\n","completion":" SynthDef(\\guiro, {\n    var snd;\n    snd = WhiteNoise.ar(0.3);\n    snd = HPF.ar(snd, 1000);\n    snd = snd * Env.perc(0.01, 0.2).ar(Done.freeSelf);\n    Out.ar(\\out.kr(0), snd ! 2);\n}).add; END"}
{"prompt":"white noise, band-pass filter, snare, chiptune, 8-bit, frequency sweep, percussive, short attack, medium decay, stereo, vibraslap, one-shot\r\n\n\n###\n\n","completion":" SynthDef(\\vibraslap, {\n    var snd;\n    snd = WhiteNoise.ar(0.3);\n    snd = BPF.ar(snd, XLine.kr(1000, 100, 0.2));\n    snd = snd * Env.perc(0.01, 0.3).ar(Done.freeSelf);\n    Out.ar(\\out.kr(0), snd ! 2);\n}).add; END"}
{"prompt":"low frequency, percussive, short attack, quick decay, envelope modulation, hard kick, kick, bass drum, high intensity, stereo, one-shot\r\n\n\n###\n\n","completion":" SynthDef(\\hardKick, {\n    var snd;\n    snd = SinOsc.ar(50 * (1 + (5 * Env.perc(0, 0.1, curve: -8).ar)) * (1 + (0.4 * Env.perc(0, 0.5, curve: -2).ar)));\n    snd = snd * Env.adsr(0.001, 0.5, 0, 0.01, curve: -7).ar(Done.freeSelf, \\gate.kr(1));\n    snd = snd * -4.dbamp;\n    snd = snd ! 2;\n    Out.ar(\\out.kr(0), snd);\n}).add; END"}
{"prompt":"plucked, pulse wave, frequency modulation, soft pluck, medium intensity, bright, stereo, one-shot\r\n\n\n###\n\n","completion":" SynthDef(\\softPluck, {\n    var snd, shift;\n    shift = 2;\n    snd = Pulse.ar((\\freq.kr(100) * XLine.ar(1.3, 1, 0.01)) + shift);\n    snd = FreqShift.ar(snd, shift * -2);\n    snd = snd * Env.adsr(0.001, 0.4, 0, 0.03, curve: -7).ar(Done.freeSelf, \\gate.kr(1));\n    snd = snd * -8.dbamp;\n    snd = snd * \\amp.kr(1);\n    snd = snd ! 2;\n    Out.ar(\\out.kr(0), snd);\n}).add; END"}
{"prompt":"percussive, high frequency, filtered, resonant, sharp clap, high intensity, stereo, one-shot, chiptune\r\n\n\n###\n\n","completion":" SynthDef(\\sharpClap, {\n    var snd;\n    snd = Hasher.ar(Sweep.ar);\n    snd = BPF.ar(snd, 1240, 0.3) * 12.dbamp;\n    snd = snd * Env.perc(0.001, 0.2, curve: -4).ar(Done.freeSelf);\n    snd = snd * -5.dbamp;\n    snd = Pan2.ar(snd, \\pan.kr(0));\n    Out.ar(\\out.kr(0), snd);\n}).add; END"}
{"prompt":"low frequency, hardstyle, techno, percussive, kick, bassdrum, bass drum, kick drum, high intensity, stereo, one-shot, distorted\r\n\n\n###\n\n","completion":" SynthDef(\\looseKick, {\n    var snd;\n    snd = LFPulse.ar(30 * (1 + (8 * Env.perc(0.0, 0.1, curve: -3).ar))) - (1 \/ 2);\n    snd = snd * Env.linen(0.0, \\duration.kr(0.08), 0.0).ar(Done.freeSelf);\n    snd = snd * \\amp.kr(-10.dbamp);\n    snd = Pan2.ar(snd, \\pan.kr(0));\n    OffsetOut.ar(\\out.kr(0), snd);\n}).add; END"}
{"prompt":"percussive, high frequency, filtered, resonant, tight snare, high intensity, tonal, peak, intense, stereo, one-shot\r\n\n\n###\n\n","completion":" SynthDef(\\tightSnare, {\n    var snd;\n    snd = LFPulse.ar(210 * (1 + (3 * Env.perc(0.0, 0.08, curve: -2).ar))) - (1 \/ 2);\n    snd = snd + (BPF.ar(Hasher.ar(Sweep.ar), 2210, 0.3) * Env.perc(0.001, 0.05).ar * 30.dbamp);\n    snd = snd.sign;\n    snd = snd * Env.linen(0.0, \\duration.kr(0.07), 0.0).ar(Done.freeSelf);\n    snd = snd * \\amp.kr(-10.dbamp);\n    snd = Pan2.ar(snd, \\pan.kr(0));\n    OffsetOut.ar(\\out.kr(0), snd);\n}).add; END"}
{"prompt":"high frequency, filtered, hi-hat, high intensity, stereo, one-shot, drum, high hat, high-hat, closed, fast, tight\r\n\n\n###\n\n","completion":" SynthDef(\\hiHat, {\n    var snd;\n    snd = BPF.ar(Hasher.ar(Sweep.ar), 8210, 0.3);\n    snd = snd.sign;\n    snd = snd * Env.linen(0.0, 0.02, 0.0).ar(Done.freeSelf);\n    snd = snd * \\amp.kr(-10.dbamp);\n    snd = Pan2.ar(snd, \\pan.kr(0));\n    OffsetOut.ar(\\out.kr(0), snd);\n}).add; END"}
{"prompt":"bass, moog bass, pulse wave, low frequency, filtered, resonant, Moog filter, low pass filter, envelope modulation, medium intensity, stereo, one-shot, 8-bit\r\n\n\n###\n\n","completion":" SynthDef(\\deepBass, {\n    var snd;\n    snd = Pulse.ar(\\freq.kr(90) * XLine.ar(1.3, 1, 0.01));\n    snd = MoogFF.ar(snd, XLine.kr([1000, 1200], [50, 8310], \\duration.kr * 1.3) * \\cutoff.kr.linexp(-1, 1, 0.5, 2), 0.1) * [0, -16].dbamp;\n    snd = snd * Env.adsr(0.001, 0.4, 0, 0.03, curve: -7).ar(Done.freeSelf, \\gate.kr(1));\n    snd = snd * -8.dbamp;\n    snd = snd * \\amp.kr(1);\n    snd = snd ! 2;\n    Out.ar(\\out.kr(0), snd);\n}).add; END"}
{"prompt":"percussive, resonant kick, low frequency, envelope modulation, high intensity, low-passed, no transient, stereo, one-shot\r\n\n\n###\n\n","completion":" SynthDef(\\resonantKick, {\n    var snd;\n    snd = SinOsc.ar(60 * (1 + (5 * Env.perc(0, 0.1, curve: -8).ar)) * (1 + (0.4 * Env.perc(0, 0.5, curve: -2).ar)));\n    snd = snd * Env.adsr(0.001, 0.5, 0, 0.01, curve: -7).ar(Done.freeSelf, \\gate.kr(1));\n    snd = snd * -4.dbamp;\n    snd = snd ! 2;\n    Out.ar(\\out.kr(0), snd);\n}).add; END"}
{"prompt":"percussive, wood block, high frequency, medium intensity, clave, stereo, one-shot\r\n\n\n###\n\n","completion":" SynthDef(\\woodBlock, {\n    var snd;\n    snd = SinOsc.ar(800, 0, 0.3);\n    snd = snd * Env.perc(0.01, 0.2).ar(Done.freeSelf);\n    Out.ar(\\out.kr(0), snd ! 2);\n}).add; END"}
{"prompt":"percussive, tom, medium frequency, medium intensity, stereo, one-shot\r\n\n\n###\n\n","completion":" SynthDef(\\tom, {\n    var snd;\n    snd = SinOsc.ar(200, 0, 0.3);\n    snd = snd * Env.perc(0.01, 0.5).ar(Done.freeSelf);\n    Out.ar(\\out.kr(0), snd ! 2);\n}).add; END"}
{"prompt":"percussive, crash cymbal, high frequency, medium intensity, long tail, long release, stereo, one-shot\r\n\n\n###\n\n","completion":" SynthDef(\\crashCymbal, {\n    var snd;\n    snd = WhiteNoise.ar(0.3);\n    snd = HPF.ar(snd, 8000);\n    snd = snd * Env.perc(0.01, 1.5).ar(Done.freeSelf);\n    Out.ar(\\out.kr(0), snd ! 2);\n}).add; END"}
{"prompt":"\n\n###\n\n","completion":" SynthDef(\\triangle, {\n    var snd;\n    snd = SinOsc.ar(6000, 0, 0.3);\n    snd = snd * Env.perc(0.01, 1).ar(Done.freeSelf);\n    Out.ar(\\out.kr(0), snd ! 2);\n}).add; END"}
{"prompt":"\n\n###\n\n","completion":" SynthDef(\\shaker, {\n    var snd;\n    snd = WhiteNoise.ar(0.3);\n    snd = LPF.ar(snd, 5000);\n    snd = snd * Env.perc(0.01, 0.1).ar(Done.freeSelf);\n    Out.ar(\\out.kr(0), snd ! 2);\n}).add; END"}
{"prompt":"\n\n###\n\n","completion":" SynthDef(\\claves, {\n    var snd;\n    snd = SinOsc.ar(2000, 0, 0.3);\n    snd = snd * Env.perc(0.01, 0.2).ar(Done.freeSelf);\n    Out.ar(\\out.kr(0), snd ! 2);\n}).add; END"}
{"prompt":"\n\n###\n\n","completion":" SynthDef(\\cabasa, {\n    var snd;\n    snd = WhiteNoise.ar(0.3);\n    snd = LPF.ar(snd, 8000);\n    snd = snd * Env.perc(0.01, 0.1).ar(Done.freeSelf);\n    Out.ar(\\out.kr(0), snd ! 2);\n}).add; END"}
{"prompt":"\n\n###\n\n","completion":" SynthDef(\\guiro, {\n    var snd;\n    snd = WhiteNoise.ar(0.3);\n    snd = HPF.ar(snd, 3000);\n    snd = snd * Env.perc(0.01, 0.5).ar(Done.freeSelf);\n    Out.ar(\\out.kr(0), snd ! 2);\n}).add; END"}
{"prompt":"\n\n###\n\n","completion":" SynthDef(\\vibraslap, {\n    var snd;\n    snd = WhiteNoise.ar(0.3);\n    snd = HPF.ar(snd, 3000);\n    snd = snd * Env.perc(0.01, 1).ar(Done.freeSelf);\n    Out.ar(\\out.kr(0), snd ! 2);\n}).add; END"}
{"prompt":"\n\n###\n\n","completion":" SynthDef(\\congo1, {\n    var snd;\n    snd = SinOsc.ar(200, 0, 0.3);\n    snd = snd * Env.perc(0.01, 0.5).ar(Done.freeSelf);\n    Out.ar(\\out.kr(0), snd ! 2);\n}).add; END"}
{"prompt":"\n\n###\n\n","completion":" SynthDef(\\bongoLow3, {\n    var snd;\n    snd = SinOsc.ar(150, 0, 0.3);\n    snd = snd * Env.perc(0.01, 0.5).ar(Done.freeSelf);\n    Out.ar(\\out.kr(0), snd ! 2);\n}).add; END"}
{"prompt":"\n\n###\n\n","completion":" SynthDef(\\djembeLow7, {\n    var snd;\n    snd = SinOsc.ar(100, 0, 0.3);\n    snd = snd * Env.perc(0.01, 0.5).ar(Done.freeSelf);\n    Out.ar(\\out.kr(0), snd ! 2);\n}).add; END"}
{"prompt":"\n\n###\n\n","completion":" SynthDef(\\tumba9, {\n    var snd;\n    snd = SinOsc.ar(125, 0, 0.3);\n    snd = snd * Env.perc(0.01, 0.5).ar(Done.freeSelf);\n    Out.ar(\\out.kr(0), snd ! 2);\n}).add; END"}
{"prompt":"\n\n###\n\n","completion":" SynthDef(\\quinto10, {\n    var snd;\n    snd = SinOsc.ar(375, 0, 0.3);\n    snd = snd * Env.perc(0.01, 0.5).ar(Done.freeSelf);\n    Out.ar(\\out.kr(0), snd ! 2);\n}).add; END"}
{"prompt":"\n\n###\n\n","completion":" SynthDef(\\djembeBass14, {\n    var snd;\n    snd = SinOsc.ar(75, 0, 0.3);\n    snd = snd * Env.perc(0.01, 0.7).ar(Done.freeSelf);\n    Out.ar(\\out.kr(0), snd ! 2);\n}).add; END"}
{"prompt":"\n\n###\n\n","completion":" SynthDef(\\complexSynth1, {\n    var freq, amp, dur, snd, env;\n    freq = \\freq.kr(440);\n    amp = \\amp.kr(0.5);\n    dur = \\dur.kr(0.5);\n    env = Env.perc(0.01, dur).kr;\n    snd = Saw.ar(freq, amp) + SinOsc.ar(freq * 1.005, amp);\n    snd = snd * env;\n    Out.ar(\\out.kr(0), snd ! 2);\n}).add; END"}
{"prompt":"\n\n###\n\n","completion":" SynthDef(\\complexSynth2, {\n    var freq, amp, dur, snd, env;\n    freq = \\freq.kr(330);\n    amp = \\amp.kr(0.5);\n    dur = \\dur.kr(0.7);\n    env = Env.perc(0.01, dur).kr;\n    snd = Pulse.ar(freq, amp) + SinOsc.ar(freq * 1.005, amp);\n    snd = snd * env;\n    Out.ar(\\out.kr(0), snd ! 2);\n}).add; END"}
{"prompt":"\n\n###\n\n","completion":" SynthDef(\\complexSynth3, {\n    var freq, amp, dur, snd, env;\n    freq = \\freq.kr(220);\n    amp = \\amp.kr(0.6);\n    dur = \\dur.kr(1);\n    env = Env.perc(0.01, dur).kr;\n    snd = LFPulse.ar(freq, amp) + SinOsc.ar(freq * 1.005, amp);\n    snd = snd * env;\n    Out.ar(\\out.kr(0), snd ! 2);\n}).add; END"}
{"prompt":"\n\n###\n\n","completion":" SynthDef(\\complexSynth4, {\n    var freq, amp, dur, snd, env;\n    freq = \\freq.kr(440);\n    amp = \\amp.kr(0.5);\n    dur = \\dur.kr(0.5);\n    env = Env.perc(0.01, dur).kr;\n    snd = Saw.ar(freq, amp) * SinOsc.ar(freq * 1.005, amp);\n    snd = snd * env;\n    Out.ar(\\out.kr(0), snd ! 2);\n}).add; END"}
{"prompt":"\n\n###\n\n","completion":" SynthDef(\\complexSynth5, {\n    var freq, amp, dur, snd, env;\n    freq = \\freq.kr(330);\n    amp = \\amp.kr(0.5);\n    dur = \\dur.kr(0.7);\n    env = Env.perc(0.01, dur).kr;\n    snd = Pulse.ar(freq, amp) * SinOsc.ar(freq * 1.005, amp);\n    snd = snd * env;\n    Out.ar(\\out.kr(0), snd ! 2);\n}).add; END"}
{"prompt":"\n\n###\n\n","completion":" SynthDef(\\complexSynth6, {\n    var freq, amp, dur, snd, env;\n    freq = \\freq.kr(220);\n    amp = \\amp.kr(0.6);\n    dur = \\dur.kr(1);\n    env = Env.perc(0.01, dur).kr;\n    snd = LFPulse.ar(freq, amp) * SinOsc.ar(freq * 1.005, amp);\n    snd = snd * env;\n    Out.ar(\\out.kr(0), snd ! 2);\n}).add; END"}
{"prompt":"\n\n###\n\n","completion":" SynthDef(\\complexSynth7, {\n    var freq, amp, dur, snd, env;\n    freq = \\freq.kr(440);\n    amp = \\amp.kr(0.5);\n    dur = \\dur.kr(0.5);\n    env = Env.perc(0.01, dur).kr;\n    snd = Saw.ar(freq, amp) * SinOsc.ar(freq * 1.005, amp) + Pulse.ar(freq, amp);\n    snd = snd * env;\n    Out.ar END"}
